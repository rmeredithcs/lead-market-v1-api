{
  "openapi": "3.0.0",
  "info": {
    "title": "Credit Sense API",
    "version": "2.0",
    "x-logo": {
      "url": "https://rmeredithcs.github.io/credit-sense-v2-api/credit_sense_logo.png"
    },
    "description": "The Credit Sense API allows you to:\n- Create, manage, and send quick links.\n- Grant access permissions for applications to another Store.\n- Manage refresh authorities and trigger refreshes on existing applications.\n- Provide transaction data that we'll use to generate Credit Sense reports.\n- Retrieve existing Credit Sense reports.\n- Retrieve statistics on the number of applications completed.\n- Retrieve statuses and metadata for applications.\n- View and manage blacklisted applications.\n\n### About these API docs\nThese API docs are provided in OpenAPI Specification (OAS) format for your reference. Use the `Download` button atop this page to download these API docs as an OAS 3-compliant JSON document that you can import into the API client of your choice (e.g. [Postman](https://www.postman.com/), [Insomnia](https://insomnia.rest/), [Swagger Inspector](https://inspector.swagger.io/builder)).\n\nYou can also click one of the buttons below to import the API spec into an API client you have installed.\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/da63c952ac2450a1701c)\n[![Run in Insomnia}](https://insomnia.rest/images/run.svg)](https://insomnia.rest/run/?label=Credit%20Sense%20API&uri=https%3A%2F%2Frmeredithcs.github.io%2Fcredit-sense-v2-api%2FCredit-Sense-API.v2.json)\n\nClick the chevrons next to object names and response codes to expand out the request and response schemas.\n![alt text](https://rmeredithcs.github.io/credit-sense-v2-api/API_docs_guide.gif \"API docs guide screen recording\")\n\n### Request URL\nThe request URL is built using multiple components - `{protocol}` `{base-url}` `{version}` `{api-key}` `{endpoint}`\n1. All calls to the API must be made using the TLS **protocol** - `https://`\n2. The **base URL** is always [api.creditsense.com.au](api.creditsense.com.au) - `https://api.creditsense.com.au`\n3. The current **version** is v2 - `https://api.creditsense.com.au/v2`\n4. The **API key** will be unique to your environment - `https://api.creditsense.com.au/v2/xxx-xxx-xxx`\n5. The **endpont** will be determined by what you're trying to do - `https://api.creditsense.com.au/v2/xxx-xxx-xxx/exampleEndpoint`\n\n### Authentication\nEach call to the API requires:\n- **API key** - identifies your account; forms part of the request URL.\n- **API token** - identifies your access to the API; included in the `Settings` object in your request body.\n\nIf you don't have your API credentials or you'd like them to be changed, please [contact us](mailto:support@creditsense.com.au).\n\n### Rate Limiting\nThe API is rate limited at one API call per second, with the ability to handle a burst of up to 20 API calls depending on the amount of API credits available.\n\n#### How do API credits work?\n- Every API call uses an API credit. \n- Your account receives one API credit every one second and can accrue a maximum of 20 credits at any time.\n- When your API credits run out the API will return a '429 - Too Many Requests' status code, indicating that you will need to retry your API call after waiting for your API credit balance to increase.",
    "contact": {
      "name": "Credit Sense Support",
      "url": "https://creditsense.com.au/contact",
      "email": "support@creditsense.com.au"
    }
  },
  "servers": [
    {
      "url": "https://api.creditsense.com.au/v2/{api-key}",
      "description": "Credit Sense v2 API",
      "variables": {
        "api-key": {
          "default": "your-api-key-goes-here",
          "description": "The unique key that identifies your account."
        }
      }
    }
  ],
  "paths": {
    "/refresh": {
      "post": {
        "summary": "Refresh apps",
        "operationId": "post-refresh",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "example": 2345678,
                            "description": "Our unique identifier for the new refresh application."
                          },
                          "App_Ref": {
                            "type": "string",
                            "example": "B123 2020/04/20 10:33:01",
                            "description": "Your reference assigned to the new refresh application. \nIf your reference is not unique within the Store, we will append the refresh date and time to make the reference unique."
                          },
                          "Client_App_Ref": {
                            "type": "string",
                            "example": "B123",
                            "description": "Your reference assigned to the new refresh application.\nIf your reference is unique within the Store, this will match the `App_Ref`."
                          },
                          "Is_New_App": {
                            "type": "boolean",
                            "example": true,
                            "description": "Denotes whether the refresh was processed as a priority."
                          },
                          "Existing_App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the existing application that was refreshed."
                          },
                          "Refresh_Date": {
                            "type": "string",
                            "example": "2020/04/20 10:33:01",
                            "description": "The date and time the new refresh application was created."
                          }
                        },
                        "required": [
                          "App_ID",
                          "App_Ref",
                          "Client_App_Ref",
                          "Is_New_App",
                          "Existing_App_ID",
                          "Refresh_Date"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "description": "Our unique identifier for the new refresh application.",
                            "example": 2345678
                          },
                          "App_Ref": {
                            "type": "string",
                            "description": "Your reference assigned to the new refresh application. \nIf your reference is not unique within the Store, we will append the refresh date and time to make the reference unique.",
                            "example": "B123"
                          },
                          "Is_New_App": {
                            "type": "boolean",
                            "example": true,
                            "description": "Denotes whether the refresh was processed as a priority."
                          },
                          "Existing_App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the existing application that was refreshed."
                          },
                          "Refresh_Date": {
                            "type": "string",
                            "example": "2020/04/20 10:33:01",
                            "description": "The date and time the new refresh application was created."
                          }
                        },
                        "required": [
                          "App_ID",
                          "App_Ref",
                          "Is_New_App",
                          "Existing_App_ID",
                          "Refresh_Date"
                        ]
                      }
                    },
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description",
                        "Apps"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "integer",
                          "description": "The code that identifies the error.",
                          "example": 207
                        },
                        "Error_Type": {
                          "type": "string",
                          "example": "Multi-Status",
                          "description": "Denotes the type of error encountered."
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The message body can contain a number of separate response codes, depending on how many sub-requests were made."
                        },
                        "Apps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "App_ID": {
                                "type": "integer",
                                "example": 1234567,
                                "description": "Our unique identifier for the application this error relates to."
                              },
                              "Error_Code": {
                                "type": "number",
                                "example": 207.1,
                                "description": "The code that identifies the error."
                              },
                              "Error_Type": {
                                "type": "string",
                                "example": "Invalid Post",
                                "description": "Describes the type of error."
                              },
                              "Error_Description": {
                                "type": "string",
                                "example": "Invalid AppID.",
                                "description": "Describes the error."
                              }
                            },
                            "required": [
                              "App_ID",
                              "Error_Code",
                              "Error_Type",
                              "Error_Description"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Response",
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 403
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Forbidden"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Access denied."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nTrigger a refresh for one or more existing applications.\n\nReasons to use this endpoint:\n- Generate a new Credit Sense report with the latest transaction history.\n- Monitor a customer's account balance to determine the best time to process a loan repayment.\n\n### Requirements\nIn order to refresh the application successfully, the following requirements must be met:\n\n1. A valid App ID must be provided.\n2. The application needs a valid and active refresh authority.\n3. The Store that owns the refresh application needs to have a refresh Store linked.\n4. The Client that owns the refresh application needs to have a valid provider (e.g. Yodlee v12).\n5. The credential of the refresh application doesn't require MFA verification.\n\n### Priority\nWhen an application is refreshed as a priority, it will be processed first in the queue. Each Client has a certain number of applications that can be set as priority. If the number of priority applications reaches the limit, the system will ignore the priority settings and refresh any remaining applications as normal priority. \n\n### Additional information\nIf a refresh is triggered on a completed application, the system will create a new application. Whereas if a refresh is triggered on an incomplete or unsuccessful application, it will refresh the existing application.\n\nOnce a refresh is completed, an email and/or webhook call may be made, dependent on the Client and Store configuration.",
        "tags": [
          "Refresh"
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will trigger a refresh.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n \n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class RefreshCall\n    {\n        /// <summary>\n        /// this is an example to refresh applications via API call (c#)\n        /// </summary>\n        public static async Task<RootObject> Refresh()\n        {\n            RootObject result = null;\n \n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n \n            // your credential information here\n            string api_key = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n            string api_token = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n \n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/refresh\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\\\"Apps\\\" :[\";\n            postBody += \"{\\\"App_ID\\\":\\\"1234567\\\", \\\"New_App_Ref\\\":\\\"xxxxxxxxxx\\\", \\\"Is_Priority\\\":\\\"True\\\"},\";    // application to be refresh\n            postBody += \"{\\\"App_ID\\\":\\\"12345678\\\", \\\"New_App_Ref\\\":\\\"xxxxxxxxxx\\\", \\\"Is_Priority\\\":\\\"True\\\"}\";   // application to be refresh\n            postBody += \"]}}\";\n \n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n \n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n \n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n \n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n \n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n \n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n \n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n \n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n \n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Response.Count > 0 && data.Error_Response == null) {\n                        //refresh successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // check applications with success status\n                        if (data != null && data.Response != null && data.Response.Count > 0) {\n                            foreach (AppSuccess app in data.Response)\n                            {\n                                //you can access application data here,\n                                System.Diagnostics.Debug.WriteLine(\"success:\"+app.App_ID);\n                            }\n                        }\n \n                        // check applications with error status\n                        if (data != null && data.Error_Response != null)\n                        {\n                            Console.Write(data.Error_Response.Error_Code);\n                            if (data.Error_Response.Apps != null && data.Error_Response.Apps.Count > 0)\n                            {\n                                foreach (AppFail app in data.Error_Response.Apps)\n                                {\n                                    //you can access fail application data here,\n                                    System.Diagnostics.Debug.WriteLine(\"fail:\" + app.App_ID);\n                                }\n                            }\n                        }\n \n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n \n            return result;\n        }\n \n        // the below classes are generate to match the api return json\n \n        /// <summary>\n        /// return resonse object\n        /// </summary>\n        public class AppSuccess\n        {\n            public int App_ID { get; set; }\n            public string App_Ref { get; set; }\n            public bool Is_Priority { get; set; }\n            public bool Is_New_App { get; set; }\n            public int Existing_App_ID { get; set; }\n        }\n \n        /// <summary>\n        /// return application object\n        /// </summary>\n        public class AppFail\n        {\n            public int App_ID { get; set; }\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n \n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n            public List<AppFail> Apps { get; set; }\n        }\n \n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public List<AppSuccess> Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n \n \n \n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will trigger a refresh.\n\npublic function OnRefresh(){\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n        $apiToken = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n \n        // set up the application details to be refreshed\n        $apps = array();\n \n        // first application information\n        $app1 = array('App_ID' => \"1234567\", 'New_App_Ref' => \"xxxxxxxxxxxx\", 'Is_Priority' => \"True\");\n        array_push($apps, $app1);\n \n        // repeat the first example to set up multiple applications if this is required\n        $app2 = array('App_ID' => \"12345678\");\n        array_push($apps, $app2);\n \n        // do the refresh api call to refresh the applications\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => array('Apps' => $apps)\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/refresh');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n        print_r($result);\n \n        // refresh successfully\n        if ($result && $result['Response'] && count($result['Response']) > 0 && !$result['Error_Response']) {\n            echo 'OK';\n        } else {\n \n            // check applications with success status\n            if ($result && $result['Response'] && count($result['Response']) > 0){\n                foreach ($result['Response'] as $app) {\n                    // retrieve details from the response\n                    $appId = $app[\"App_ID\"];\n                    $appRef = $app[\"App_Ref\"];\n                    $isPriority = $app[\"Is_Priority\"];\n                    $isNewApp = $app[\"Is_New_App\"];\n                    $existingAppId = $app[\"Existing_App_ID\"];\n \n                    echo \"done: \" . $appId . \"<br>\";\n                }\n            }\n \n            // check applications with error status\n            if ($result && $result['Error_Response']){\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n                // get applications which is failed to refresh\n                if($result['Error_Response']['Apps'] && count($result['Error_Response']['Apps']) > 0){\n                    foreach ($result['Error_Response']['Apps'] as $app) {\n                        // retrieve details from the response\n                        $appId = $app[\"App_ID\"];\n \n                        echo \"failed: \" . $appId . \"<br>\";\n                    }\n                }\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    }catch(\\Exception $e){\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "207",
                          "207.1",
                          "207.2",
                          "207.3",
                          "207.4",
                          "207.5",
                          "207.7",
                          "207.9",
                          "207.10",
                          "207.11",
                          "207.12",
                          "207.13",
                          "207.14",
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.1",
                          "422.2",
                          "429",
                          "500",
                          "501",
                          "503.1"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Apps"
                    ],
                    "properties": {
                      "Apps": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "App_ID": {
                              "type": "integer",
                              "example": 1234567,
                              "description": "Our unique identifier for the application to be refreshed."
                            },
                            "New_App_Ref": {
                              "type": "string",
                              "example": "B123",
                              "description": "Your reference assigned to the new application. If not provided, your reference from the  original application will be used with \"\\_refresh\" appended to it."
                            },
                            "Is_priority": {
                              "type": "boolean",
                              "default": false,
                              "description": "If set to true, the refresh will be processed as a priority.\nEach Store has a limit of priority applications in the queue. By default, the Store queue limit is set to 10."
                            },
                            "Copy_Existing_Data": {
                              "type": "boolean",
                              "default": false,
                              "description": "If set to true, the existing application will be copied to the Refresh store *without* triggering an actual refresh (i.e. no new bank pull will occur). \nThis is usually only used in specific circumstances."
                            },
                            "No_Delivery": {
                              "type": "boolean",
                              "default": false,
                              "description": "If set to true, the configured delivery methods (e.g. email, webhook, etc.) on the store will be ignored for the refresh. \nThis can be useful if you intend to poll the `/app/search` endpoint to monitor the status of the application. \nThis is usually only used in specific circumstances and may be used in conjunction with `Copy_Existing_Data`."
                            }
                          },
                          "required": [
                            "App_ID"
                          ]
                        }
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 207               | 207        | Multi-Status          | The message body can contain a number of separate response codes, depending on how many sub-requests were made.                 |\n|                   | 207.1      | Invalid Post          | Invalid AppID.                                                                                                                  |\n|                   | 207.2      | Invalid Post          | Invalid provider.                                                                                                               |\n|                   | 207.3      | Invalid Post          | Cannot refresh an application that requires MFA.                                                                                |\n|                   | 207.4      | Invalid Post          | Unable to refresh as the application doesn't belong to the store with enabled refresh service.                                  |\n|                   | 207.5      | Data Error            | The customer is not authorised for a refresh, or the authority to refresh the customer has expired.                             |\n|                   | 207.7      | Data Error            | Failed to delete the customer authority as it has expired or revoked.                                                           |\n|                   | 207.9      | Data Error            | Failed to renew the authority as the application doesn't have any customer authority assigned.                                  |\n|                   | 207.10     | Data Error            | Unknown error.                                                                                                                  |\n|                   | 207.11     | Data Error            | Failed to refresh as the application can't call Yodlee v12 API.                                                                 |\n|                   | 207.12     | Data Error            | Failed to refresh as another refresh is in process.                                                                             |\n|                   | 207.13     | Data Error            | Failed to refresh as the customer bank account is in use by another refresh.                                                    |\n|                   | 207.14     | Data Error            | Failed to renew the authority as it has been revoked by the customer.                                                           |\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.1      | Unprocessable Entity  | No applications provided.                                                                                                       |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/refresh/cancel": {
      "post": {
        "summary": "Cancel pending refreshes",
        "operationId": "post-refresh-cancel",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "string",
                            "description": "Our unique identifier for the cancelled refresh application.",
                            "example": "1234567"
                          }
                        },
                        "required": [
                          "App_ID"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "description": "Our unique identifier for the cancelled refresh application.",
                            "example": 2345678
                          }
                        },
                        "required": [
                          "App_ID"
                        ]
                      }
                    },
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description",
                        "Apps"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "integer",
                          "description": "The code that identifies the error.",
                          "example": 207
                        },
                        "Error_Type": {
                          "type": "string",
                          "example": "Multi-Status",
                          "description": "Denotes the type of error encountered."
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The message body can contain a number of separate response codes, depending on how many sub-requests were made."
                        },
                        "Apps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "App_ID": {
                                "type": "integer",
                                "example": 1234567,
                                "description": "Our unique identifier for the application this error relates to."
                              },
                              "Error_Code": {
                                "type": "number",
                                "example": 207.1,
                                "description": "The code that identifies the error."
                              },
                              "Error_Type": {
                                "type": "string",
                                "example": "Invalid Post",
                                "description": "Describes the type of error."
                              },
                              "Error_Description": {
                                "type": "string",
                                "example": "Invalid AppID.",
                                "description": "Describes the error."
                              }
                            },
                            "required": [
                              "App_ID",
                              "Error_Code",
                              "Error_Type",
                              "Error_Description"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Response",
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 403
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Forbidden"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Access denied."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nTrigger a cancellation on one or more refresh applications.\n\nReasons to use this endpoint:\n- Cancel any pending refreshes.\n\n### Requirements\nIn order to cancel a refresh on an application, the following requirements must be met:\n\n1. A valid App ID must be provided.",
        "tags": [
          "Refresh"
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will cancel a refresh.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n \n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class RefreshCall\n    {\n        /// <summary>\n        /// this is an example to cancel refresh applications via API call (c#)\n        /// </summary>\n        public static async Task<RootObject> CancelRefresh()\n        {\n            RootObject result = null;\n \n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n \n            // your credential information here\n            string api_key = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n            string api_token = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n \n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/refresh/cancel\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\\\"Apps\\\" :[\";\n            postBody += \"{\\\"App_ID\\\":\\\"1234567\\\"},\";    // application to be refresh\n            postBody += \"{\\\"App_ID\\\":\\\"12345678\\\"}\";   // application to be refresh\n            postBody += \"]}}\";\n \n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n \n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n \n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n \n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n \n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n \n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n \n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n \n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n \n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Response.Count > 0 && data.Error_Response == null) {\n                        //cancel refresh successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // check applications with success status\n                        if (data != null && data.Response != null && data.Response.Count > 0) {\n                            foreach (AppSuccess app in data.Response)\n                            {\n                                //you can access application data here,\n                                System.Diagnostics.Debug.WriteLine(\"success:\"+app.App_ID);\n                            }\n                        }\n \n                        // check applications with error status\n                        if (data != null && data.Error_Response != null)\n                        {\n                            Console.Write(data.Error_Response.Error_Code);\n                            if (data.Error_Response.Apps != null && data.Error_Response.Apps.Count > 0)\n                            {\n                                foreach (AppFail app in data.Error_Response.Apps)\n                                {\n                                    //you can access fail application data here,\n                                    System.Diagnostics.Debug.WriteLine(\"fail:\" + app.App_ID);\n                                }\n                            }\n                        }\n \n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n \n            return result;\n        }\n \n        // the below classes are generate to match the api return json\n \n        /// <summary>\n        /// return resonse object\n        /// </summary>\n        public class AppSuccess\n        {\n            public int App_ID { get; set; }\n        }\n \n        /// <summary>\n        /// return application object\n        /// </summary>\n        public class AppFail\n        {\n            public int App_ID { get; set; }\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n \n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n            public List<AppFail> Apps { get; set; }\n        }\n \n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public List<AppSuccess> Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will cancel a refresh.\n\npublic function OnCancelRefresh(){\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n        $apiToken = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n \n        // set up the application details to be cancelled\n        $apps = array();\n \n        // first application information\n        $app1 = array('App_ID' => \"1234567\");\n        array_push($apps, $app1);\n \n        // repeat the first example to set up multiple applications if this is required\n        $app2 = array('App_ID' => \"12345678\");\n        array_push($apps, $app2);\n \n        // do the cancel refresh api call to cancel refreshing the applications\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => array('Apps' => $apps)\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/refresh/cancel');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n        print_r($result);\n \n        // cancel successfully\n        if ($result && $result['Response'] && count($result['Response']) > 0 && !$result['Error_Response']) {\n            echo 'OK';\n        } else {\n \n            // check applications with success status\n            if ($result && $result['Response'] && count($result['Response']) > 0){\n                foreach ($result['Response'] as $app) {\n                    // retrieve details from the response\n                    $appId = $app[\"App_ID\"];\n                    $appRef = $app[\"App_Ref\"];\n                    $isPriority = $app[\"Is_Priority\"];\n                    $isNewApp = $app[\"Is_New_App\"];\n                    $existingAppId = $app[\"Existing_App_ID\"];\n \n                    echo \"done: \" . $appId . \"<br>\";\n                }\n            }\n \n            // check applications with error status\n            if ($result && $result['Error_Response']){\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n                // get applications which is failed to refresh\n                if($result['Error_Response']['Apps'] && count($result['Error_Response']['Apps']) > 0){\n                    foreach ($result['Error_Response']['Apps'] as $app) {\n                        // retrieve details from the response\n                        $appId = $app[\"App_ID\"];\n \n                        echo \"failed: \" . $appId . \"<br>\";\n                    }\n                }\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    }catch(\\Exception $e){\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "207",
                          "207.1",
                          "207.2",
                          "207.3",
                          "207.4",
                          "207.5",
                          "207.7",
                          "207.9",
                          "207.10",
                          "207.11",
                          "207.12",
                          "207.13",
                          "207.14",
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.1",
                          "422.2",
                          "429",
                          "500",
                          "501",
                          "503.1"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Apps"
                    ],
                    "properties": {
                      "Apps": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "App_ID": {
                              "type": "integer",
                              "description": "Our unique identifier for the application to cancel the refresh for.",
                              "example": 1234567
                            }
                          },
                          "required": [
                            "App_ID"
                          ]
                        }
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 207               | 207        | Multi-Status          | The message body can contain a number of separate response codes, depending on how many sub-requests were made.                 |\n|                   | 207.1      | Invalid Post          | Invalid AppID.                                                                                                                  |\n|                   | 207.2      | Invalid Post          | Invalid provider.                                                                                                               |\n|                   | 207.3      | Invalid Post          | Cannot refresh an application that requires MFA.                                                                                |\n|                   | 207.4      | Invalid Post          | Unable to refresh as the application doesn't belong to the store with enabled refresh service.                                  |\n|                   | 207.5      | Data Error            | The customer is not authorised for a refresh, or the authority to refresh the customer has expired.                             |\n|                   | 207.7      | Data Error            | Failed to delete the customer authority as it has expired or revoked.                                                           |\n|                   | 207.9      | Data Error            | Failed to renew the authority as the application doesn't have any customer authority assigned.                                  |\n|                   | 207.10     | Data Error            | Unknown error.                                                                                                                  |\n|                   | 207.11     | Data Error            | Failed to refresh as the application can't call Yodlee v12 API.                                                                 |\n|                   | 207.12     | Data Error            | Failed to refresh as another refresh is in process.                                                                             |\n|                   | 207.13     | Data Error            | Failed to refresh as the customer bank account is in use by another refresh.                                                    |\n|                   | 207.14     | Data Error            | Failed to renew the authority as it has been revoked by the customer.                                                           |\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.1      | Unprocessable Entity  | No applications provided.                                                                                                       |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/refresh/deleteAuthority": {
      "post": {
        "summary": "Revoke refresh authorities",
        "operationId": "post-refresh-deleteAuthority",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "string",
                            "description": "Our unique identifier for the application that the refresh authority was deleted for.",
                            "example": "1234567"
                          }
                        },
                        "required": [
                          "App_ID"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "description": "Our unique identifier for the application that the refresh authority was deleted for.",
                            "example": 2345678
                          }
                        },
                        "required": [
                          "App_ID"
                        ]
                      }
                    },
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description",
                        "Apps"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "integer",
                          "description": "The code that identifies the error.",
                          "example": 207
                        },
                        "Error_Type": {
                          "type": "string",
                          "example": "Multi-Status",
                          "description": "Denotes the type of error encountered."
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The message body can contain a number of separate response codes, depending on how many sub-requests were made."
                        },
                        "Apps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "App_ID": {
                                "type": "integer",
                                "example": 1234567,
                                "description": "Our unique identifier for the application this error relates to."
                              },
                              "Error_Code": {
                                "type": "number",
                                "example": 207.1,
                                "description": "The code that identifies the error."
                              },
                              "Error_Type": {
                                "type": "string",
                                "example": "Invalid Post",
                                "description": "Describes the type of error."
                              },
                              "Error_Description": {
                                "type": "string",
                                "example": "Invalid AppID.",
                                "description": "Describes the error."
                              }
                            },
                            "required": [
                              "App_ID",
                              "Error_Code",
                              "Error_Type",
                              "Error_Description"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Response",
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 403
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Forbidden"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Access denied."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nSet the active refresh authority on one or more applications as inactive and cancel the refresh on the applications.\n\nReasons to use this endpoint:\n- A customer's loan term ends and you no longer wish to maintain ongoing access to their updated transaction history.\n- A customer requests you to remove the ability to access their bank account information.\n\n### Requirements\nIn order to set the refresh authority for an application as inactive, the following requirements must be met:\n\n1. A valid App ID must be provided.\n2. The application needs a valid and active refresh authority assigned.",
        "tags": [
          "Refresh"
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will delete a refresh authority.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n \n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class RefreshCall\n    {\n        /// <summary>\n        /// this is an example to delete authority of the applications via API call (c#)\n        /// </summary>\n        public static async Task<RootObject> DeleteAuthority()\n        {\n            RootObject result = null;\n \n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n \n            // your credential information here\n            string api_key = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n            string api_token = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n \n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/refresh/deleteAuthority\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\\\"Apps\\\" :[\";\n            postBody += \"{\\\"App_ID\\\":\\\"1234567\\\"},\";    // application to be refresh\n            postBody += \"{\\\"App_ID\\\":\\\"12345678\\\"}\";   // application to be refresh\n            postBody += \"]}}\";\n \n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n \n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n \n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n \n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n \n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n \n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n \n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n \n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n \n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Response.Count > 0 && data.Error_Response == null) {\n                        //delete authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // check applications with success status\n                        if (data != null && data.Response != null && data.Response.Count > 0) {\n                            foreach (AppSuccess app in data.Response)\n                            {\n                                //you can access application data here,\n                                System.Diagnostics.Debug.WriteLine(\"success:\"+app.App_ID);\n                            }\n                        }\n \n                        // check applications with error status\n                        if (data != null && data.Error_Response != null)\n                        {\n                            Console.Write(data.Error_Response.Error_Code);\n                            if (data.Error_Response.Apps != null && data.Error_Response.Apps.Count > 0)\n                            {\n                                foreach (AppFail app in data.Error_Response.Apps)\n                                {\n                                    //you can access fail application data here,\n                                    System.Diagnostics.Debug.WriteLine(\"fail:\" + app.App_ID);\n                                }\n                            }\n                        }\n \n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n \n            return result;\n        }\n \n        // the below classes are generate to match the api return json\n \n        /// <summary>\n        /// return resonse object\n        /// </summary>\n        public class AppSuccess\n        {\n            public int App_ID { get; set; }\n        }\n \n        /// <summary>\n        /// return application object\n        /// </summary>\n        public class AppFail\n        {\n            public int App_ID { get; set; }\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n \n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n            public List<AppFail> Apps { get; set; }\n        }\n \n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public List<AppSuccess> Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will delete a refresh authority.\n\npublic function OnDeleteAuthority(){\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n        $apiToken = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n \n        // set up the application details to be refreshed\n        $apps = array();\n \n        // first application information\n        $app1 = array('App_ID' => \"1234567\");\n        array_push($apps, $app1);\n \n        // repeat the first example to set up multiple applications if this is required\n        $app2 = array('App_ID' => \"12345678\");\n        array_push($apps, $app2);\n \n        // do the delete authority api call to delete authority of the applications\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => array('Apps' => $apps)\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/refresh/deleteAuthority');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n        print_r($result);\n \n        // delete successfully\n        if ($result && $result['Response'] && count($result['Response']) > 0 && !$result['Error_Response']) {\n            echo 'OK';\n        } else {\n \n            // check applications with success status\n            if ($result && $result['Response'] && count($result['Response']) > 0){\n                foreach ($result['Response'] as $app) {\n                    // retrieve details from the response\n                    $appId = $app[\"App_ID\"];\n                    $appRef = $app[\"App_Ref\"];\n                    $isPriority = $app[\"Is_Priority\"];\n                    $isNewApp = $app[\"Is_New_App\"];\n                    $existingAppId = $app[\"Existing_App_ID\"];\n \n                    echo \"done: \" . $appId . \"<br>\";\n                }\n            }\n \n            // check applications with error status\n            if ($result && $result['Error_Response']){\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n                // get applications which is failed to refresh\n                if($result['Error_Response']['Apps'] && count($result['Error_Response']['Apps']) > 0){\n                    foreach ($result['Error_Response']['Apps'] as $app) {\n                        // retrieve details from the response\n                        $appId = $app[\"App_ID\"];\n \n                        echo \"failed: \" . $appId . \"<br>\";\n                    }\n                }\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    }catch(\\Exception $e){\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "207",
                          "207.1",
                          "207.2",
                          "207.3",
                          "207.4",
                          "207.5",
                          "207.7",
                          "207.9",
                          "207.10",
                          "207.11",
                          "207.12",
                          "207.13",
                          "207.14",
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.1",
                          "422.2",
                          "429",
                          "500",
                          "501",
                          "503.1"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Apps"
                    ],
                    "properties": {
                      "Apps": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "App_ID": {
                              "type": "integer",
                              "description": "Our unique identifier for the application to delete the refresh authority for.",
                              "example": 1234567
                            }
                          },
                          "required": [
                            "App_ID"
                          ]
                        }
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 207               | 207        | Multi-Status          | The message body can contain a number of separate response codes, depending on how many sub-requests were made.                 |\n|                   | 207.1      | Invalid Post          | Invalid AppID.                                                                                                                  |\n|                   | 207.2      | Invalid Post          | Invalid provider.                                                                                                               |\n|                   | 207.3      | Invalid Post          | Cannot refresh an application that requires MFA.                                                                                |\n|                   | 207.4      | Invalid Post          | Unable to refresh as the application doesn't belong to the store with enabled refresh service.                                  |\n|                   | 207.5      | Data Error            | The customer is not authorised for a refresh, or the authority to refresh the customer has expired.                             |\n|                   | 207.7      | Data Error            | Failed to delete the customer authority as it has expired or revoked.                                                           |\n|                   | 207.9      | Data Error            | Failed to renew the authority as the application doesn't have any customer authority assigned.                                  |\n|                   | 207.10     | Data Error            | Unknown error.                                                                                                                  |\n|                   | 207.11     | Data Error            | Failed to refresh as the application can't call Yodlee v12 API.                                                                 |\n|                   | 207.12     | Data Error            | Failed to refresh as another refresh is in process.                                                                             |\n|                   | 207.13     | Data Error            | Failed to refresh as the customer bank account is in use by another refresh.                                                    |\n|                   | 207.14     | Data Error            | Failed to renew the authority as it has been revoked by the customer.                                                           |\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.1      | Unprocessable Entity  | No applications provided.                                                                                                       |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/refresh/renewAuthority": {
      "post": {
        "summary": "Renew refresh authorities",
        "operationId": "post-refresh-renewAuthority",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "string",
                            "description": "Our unique identifier for the application that the refresh authority was renewed for.",
                            "example": "1234567"
                          }
                        },
                        "required": [
                          "App_ID"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "207": {
            "description": "Multi-Status",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "description": "Our unique identifier for the application that the refresh authority was renewed for.",
                            "example": 2345678
                          }
                        },
                        "required": [
                          "App_ID"
                        ]
                      }
                    },
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description",
                        "Apps"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "integer",
                          "description": "The code that identifies the error.",
                          "example": 207
                        },
                        "Error_Type": {
                          "type": "string",
                          "example": "Multi-Status",
                          "description": "Denotes the type of error encountered."
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The message body can contain a number of separate response codes, depending on how many sub-requests were made."
                        },
                        "Apps": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "App_ID": {
                                "type": "integer",
                                "example": 1234567,
                                "description": "Our unique identifier for the application this error relates to."
                              },
                              "Error_Code": {
                                "type": "number",
                                "example": 207.1,
                                "description": "The code that identifies the error."
                              },
                              "Error_Type": {
                                "type": "string",
                                "example": "Invalid Post",
                                "description": "Describes the type of error."
                              },
                              "Error_Description": {
                                "type": "string",
                                "example": "Invalid AppID.",
                                "description": "Describes the error."
                              }
                            },
                            "required": [
                              "App_ID",
                              "Error_Code",
                              "Error_Type",
                              "Error_Description"
                            ]
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Response",
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 403
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Forbidden"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Access denied."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nTrigger a renewal on the authority of the applications provided.\n\n**This endpoint is disabled by default. [Contact us](mailto:support@creditsense.com.au) for more information.**\n\nReasons to use this endpoint:\n- Extend the expiration date for the authority to access a customer's transaction history.\n\n### Requirements\nIn order to extend the expiration date for a refresh authority on an application, the following requirements must be met:\n\n1. A valid App ID must be provided.\n2. The application needs a valid and active refresh authority assigned.\n3. The refresh authority was not revoked by the customer.",
        "tags": [
          "Refresh"
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will renew a refresh authority.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n \n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class RefreshCall\n    {\n        /// <summary>\n        /// this is an example to renew authority of the applications via API call (c#)\n        /// </summary>\n        public static async Task<RootObject> RenewAuthority()\n        {\n            RootObject result = null;\n \n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n \n            // your credential information here\n            string api_key = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n            string api_token = \"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\";\n \n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/refresh/renewAuthority\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\\\"Apps\\\" :[\";\n            postBody += \"{\\\"App_ID\\\":\\\"1234567\\\"},\";    // application to be refresh\n            postBody += \"{\\\"App_ID\\\":\\\"12345678\\\"}\";   // application to be refresh\n            postBody += \"]}}\";\n \n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n \n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n \n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n \n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n \n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n \n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n \n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n \n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n \n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Response.Count > 0 && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // check applications with success status\n                        if (data != null && data.Response != null && data.Response.Count > 0) {\n                            foreach (AppSuccess app in data.Response)\n                            {\n                                //you can access application data here,\n                                System.Diagnostics.Debug.WriteLine(\"success:\"+app.App_ID);\n                            }\n                        }\n \n                        // check applications with error status\n                        if (data != null && data.Error_Response != null)\n                        {\n                            Console.Write(data.Error_Response.Error_Code);\n                            if (data.Error_Response.Apps != null && data.Error_Response.Apps.Count > 0)\n                            {\n                                foreach (AppFail app in data.Error_Response.Apps)\n                                {\n                                    //you can access fail application data here,\n                                    System.Diagnostics.Debug.WriteLine(\"fail:\" + app.App_ID);\n                                }\n                            }\n                        }\n \n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n \n            return result;\n        }\n \n        // the below classes are generate to match the api return json\n \n        /// <summary>\n        /// return resonse object\n        /// </summary>\n        public class AppSuccess\n        {\n            public int App_ID { get; set; }\n        }\n \n        /// <summary>\n        /// return application object\n        /// </summary>\n        public class AppFail\n        {\n            public int App_ID { get; set; }\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n \n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public int Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n            public List<AppFail> Apps { get; set; }\n        }\n \n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public List<AppSuccess> Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will renew a refresh authority.\n\npublic function OnRenewAuthority(){\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n        $apiToken = 'XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX';\n \n        // set up the application details to be refreshed\n        $apps = array();\n \n        // first application information\n        $app1 = array('App_ID' => \"1234567\");\n        array_push($apps, $app1);\n \n        // repeat the first example to set up multiple applications if this is required\n        $app2 = array('App_ID' => \"12345678\");\n        array_push($apps, $app2);\n \n        // do the new authority api call to renew the authority of the applications\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => array('Apps' => $apps)\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/refresh/renewAuthority');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n        print_r($result);\n \n        // renew authority successfully\n        if ($result && $result['Response'] && count($result['Response']) > 0 && !$result['Error_Response']) {\n            echo 'OK';\n        } else {\n \n            // check applications with success status\n            if ($result && $result['Response'] && count($result['Response']) > 0){\n                foreach ($result['Response'] as $app) {\n                    // retrieve details from the response\n                    $appId = $app[\"App_ID\"];\n                    $appRef = $app[\"App_Ref\"];\n                    $isPriority = $app[\"Is_Priority\"];\n                    $isNewApp = $app[\"Is_New_App\"];\n                    $existingAppId = $app[\"Existing_App_ID\"];\n \n                    echo \"done: \" . $appId . \"<br>\";\n                }\n            }\n \n            // check applications with error status\n            if ($result && $result['Error_Response']){\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n                // get applications which is failed to refresh\n                if($result['Error_Response']['Apps'] && count($result['Error_Response']['Apps']) > 0){\n                    foreach ($result['Error_Response']['Apps'] as $app) {\n                        // retrieve details from the response\n                        $appId = $app[\"App_ID\"];\n \n                        echo \"failed: \" . $appId . \"<br>\";\n                    }\n                }\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    }catch(\\Exception $e){\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "207",
                          "207.1",
                          "207.2",
                          "207.3",
                          "207.4",
                          "207.5",
                          "207.7",
                          "207.9",
                          "207.10",
                          "207.11",
                          "207.12",
                          "207.13",
                          "207.14",
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.1",
                          "422.2",
                          "429",
                          "500",
                          "501",
                          "503.1"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Apps"
                    ],
                    "properties": {
                      "Apps": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "App_ID": {
                              "type": "integer",
                              "description": "Our unique identifier for the application to renew the refresh authority for.",
                              "example": 1234567
                            }
                          },
                          "required": [
                            "App_ID"
                          ]
                        }
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 207               | 207        | Multi-Status          | The message body can contain a number of separate response codes, depending on how many sub-requests were made.                 |\n|                   | 207.1      | Invalid Post          | Invalid AppID.                                                                                                                  |\n|                   | 207.2      | Invalid Post          | Invalid provider.                                                                                                               |\n|                   | 207.3      | Invalid Post          | Cannot refresh an application that requires MFA.                                                                                |\n|                   | 207.4      | Invalid Post          | Unable to refresh as the application doesn't belong to the store with enabled refresh service.                                  |\n|                   | 207.5      | Data Error            | The customer is not authorised for a refresh, or the authority to refresh the customer has expired.                             |\n|                   | 207.7      | Data Error            | Failed to delete the customer authority as it has expired or revoked.                                                           |\n|                   | 207.9      | Data Error            | Failed to renew the authority as the application doesn't have any customer authority assigned.                                  |\n|                   | 207.10     | Data Error            | Unknown error.                                                                                                                  |\n|                   | 207.11     | Data Error            | Failed to refresh as the application can't call Yodlee v12 API.                                                                 |\n|                   | 207.12     | Data Error            | Failed to refresh as another refresh is in process.                                                                             |\n|                   | 207.13     | Data Error            | Failed to refresh as the customer bank account is in use by another refresh.                                                    |\n|                   | 207.14     | Data Error            | Failed to renew the authority as it has been revoked by the customer.                                                           |\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.1      | Unprocessable Entity  | No applications provided.                                                                                                       |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/report/download": {
      "post": {
        "summary": "Download reports",
        "operationId": "post-report-download",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Denotes whether the report was successfully retrieved."
                    },
                    "Response": {
                      "type": "object",
                      "properties": {
                        "postVersion": {
                          "type": "number",
                          "example": 2,
                          "description": "Denotes the version of the response as configured on the Client object."
                        },
                        "appId": {
                          "type": "integer",
                          "example": 1234567,
                          "description": "Our unique identifier for the retrieved application."
                        },
                        "appReference": {
                          "type": "string",
                          "example": "B123",
                          "description": "Your reference assigned to the application."
                        },
                        "createDate": {
                          "type": "string",
                          "example": "2020-04-03 16:18:19.8466667",
                          "description": "The date and time the application was created."
                        },
                        "clientName": {
                          "type": "string",
                          "example": "Pickle Finance",
                          "description": "Denotes the Client object for the retrieved report."
                        },
                        "storeName": {
                          "type": "string",
                          "example": "Dev",
                          "description": "Denotes the Store object for the retrieved report."
                        },
                        "attachments": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "example": "Credit Sense Report",
                                "description": "Denotes the type of content retrieved."
                              },
                              "name": {
                                "type": "string",
                                "example": "Categorised",
                                "description": "Denotes the report or document name."
                              },
                              "contentType": {
                                "type": "string",
                                "enum": [
                                  "json",
                                  "pdf",
                                  "xml",
                                  "html"
                                ],
                                "description": "Denotes the format of the retrieved report or document."
                              },
                              "content": {
                                "type": "string",
                                "description": "The retrieved report or document as a base64-encoded string.",
                                "example": "eyJBcHBsaWNhdGlvbnMiOnsiQXBwbGljYXRpb24iOnsiQXBwSUQiOj...[truncated]"
                              }
                            },
                            "required": [
                              "type",
                              "name",
                              "contentType",
                              "content"
                            ]
                          }
                        }
                      },
                      "required": [
                        "postVersion",
                        "appId",
                        "appReference",
                        "createDate",
                        "clientName",
                        "storeName",
                        "attachments"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "description": "Invalid Post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the report was successfully retrieved."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            1,
                            2,
                            3,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "Invalid Credit Sense Application ID or not authorised for application",
                            "Invalid Template Report ID or not authorised to to view this report for this application",
                            "The Credit Sense Application specified is not complete. (This error can only be shown when Supporting_Documents is supplied as an empty array)",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters. (The missing parameters will be listed)",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          1,
                          2,
                          3,
                          99,
                          100,
                          101,
                          102
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "App_ID"
                    ],
                    "properties": {
                      "App_ID": {
                        "type": "integer",
                        "example": 1234567,
                        "description": "Our unique identifier for the application to be downloaded."
                      },
                      "CS_Report_Template_ID": {
                        "type": "integer",
                        "description": "Denotes the report template the application will be retrieved in.",
                        "enum": [
                          7,
                          9,
                          10,
                          12,
                          14,
                          15,
                          16
                        ]
                      },
                      "Bank_Statements": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "enum": [
                                "all"
                              ],
                              "example": "all",
                              "description": "Indicates whether bank statements are to be returned in the response."
                            }
                          ],
                          "type": "string"
                        }
                      },
                      "Supporting_Documents": {
                        "type": "array",
                        "description": "",
                        "items": {
                          "anyOf": [
                            {
                              "enum": [
                                "centrelink",
                                "ato",
                                "medicare",
                                "winz"
                              ],
                              "example": "centrelink",
                              "description": "Denotes the supporting documents to be returned in the response."
                            }
                          ],
                          "type": "string"
                        }
                      },
                      "CS_Report_Formats": {
                        "type": "array",
                        "description": "",
                        "items": {
                          "anyOf": [
                            {
                              "description": "Denotes the formats of the reports to be returned in the response.",
                              "enum": [
                                "json",
                                "pdf",
                                "xml",
                                "html"
                              ],
                              "example": "json"
                            }
                          ],
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                                                                                                              |\n|------------|------------------------|------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1          | Data Error             | Invalid Credit Sense Application ID or not authorised for application                                                                          |\n| 2          | Data Error             | Invalid Template Report ID or not authorised to to view this report for this application                                                       |\n| 3          | Data Error             | The Credit Sense Application specified is not complete. (This error can only be shown when Supporting_Documents is supplied as an empty array) |\n| 99         | Unknown Error          | Unknown Error                                                                                                                                  |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time                                                                                          |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed)                                                                               |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                                                                                                   |\n\n### Report types\nPass a report template ID from the below table into `$.Payload.CS_Report_Template_ID` to download the Credit Sense report in your preferred template.\n\n| Report template ID | Report name                             |\n|--------------------|-----------------------------------------|\n| 7                  | SACC New                                |\n| 9                  | Enhanced Income Liabilities Report      |\n| 10                 | SACC New Full Report                    |\n| 12                 | Enhanced Income Liabilities Full Report |\n| 14                 | SME Report                              |\n| 15                 | Data Only                               |\n| 16                 | Categorised                             |\n\n### Supporting documents\nPass one or more supporting document names from the below table into `$.Payload.Supporting_Documents` to download the supporting docs along with the Credit Sense report.\n\n| Name       | Description                      | Format | Format description        |\n|------------|----------------------------------|--------|---------------------------|\n| ato        | ATO Notice of Assessment         | pdf    | Portable Document Format  |\n| centrelink | Centrelink Income Statement      | pdf    | Portable Document Format  |\n| medicare   | Medicare Profile Screenshot      | png    | Portable Network Graphics |\n| winz       | Work & Income NZ (WINZ) benefits | pdf    | Portable Document Format  |\n\n### Report formats\nPass one or more report format names from the below table into `$.Payload.CS_Report_Formats` to download the Credit Sense report in your preferred formats.\n\n| Name | Description                    | Format description         |\n|------|--------------------------------|----------------------------|\n| pdf  | Non-interactive display format | Portable Document Format   |\n| html | Interactive display format     | Hypertext Markup Language  |\n| json | Data format, for integration   | JavaScript Object Notation |\n| xml  | Data format, for integration   | Extensible Markup Language |"
        },
        "description": "### Overview\nRetrieve reports in the requested formats for a specified application.\n\nData in `$.Response` is provided in an identical format to the webhook delivery of Credit Sense reports and supporting documents.\n\nThis API delivers the Credit Sense report and supporting documents in `$.Response.attachments.content` as a base64 encoded string. Information about an application ('metadata') is returned in addition to an array of attachments that can contain different document types (HTML, JSON, PDF, XML). To ensure that the metadata and attachments form valid JSON, we encode the attachments (using standard base64 encoding). If we didn't do this, any HTML, PDF, or XML attachments could break the API because they may contain content that is cannot be included in valid JSON.\n\nReasons to use this endpoint:\n- Retrieve a Credit Sense report in data formats (JSON, XML).\n- Retrieve a Credit Sense report in visual formats (HTML, PDF).\n- Retrieve supporting documents attached to Credit Sense a report.",
        "tags": [
          "General"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      },
      "parameters": []
    },
    "/app/search": {
      "post": {
        "summary": "Search for apps",
        "operationId": "post-app-search",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Denotes whether the report was successfully retrieved."
                    },
                    "Response": {
                      "type": "object",
                      "required": [
                        "Applications",
                        "Current_Dt",
                        "Last_App_Dt",
                        "Count",
                        "Total"
                      ],
                      "properties": {
                        "Applications": {
                          "type": "array",
                          "description": "The array of matching applications, ordered by `Modify_Dt` descending. If there are no applications found the array will be empty.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "App_ID": {
                                "type": "integer",
                                "description": "Our unique identifier for the application.",
                                "example": 1234567
                              },
                              "App_Ref": {
                                "type": "string",
                                "example": "B123",
                                "description": "Your reference for the application."
                              },
                              "Status": {
                                "type": "string",
                                "description": "Denotes the status for the application.",
                                "enum": [
                                  "Quick Link",
                                  "Receiving Logons",
                                  "Processing",
                                  "Complete",
                                  "Error"
                                ]
                              },
                              "Error_Code": {
                                "type": "string",
                                "description": "The code that identifies the error.",
                                "enum": [
                                  "401",
                                  "402",
                                  "403",
                                  "404",
                                  "405",
                                  "406",
                                  "407",
                                  "408",
                                  "409",
                                  "412",
                                  "413",
                                  "414",
                                  "415",
                                  "416",
                                  "419",
                                  "422",
                                  "424",
                                  "428",
                                  "429",
                                  "470",
                                  "505",
                                  "507",
                                  "508",
                                  "509",
                                  "518",
                                  "520",
                                  "522",
                                  "523",
                                  "525",
                                  "801",
                                  "802",
                                  "1000",
                                  "1001",
                                  "1002",
                                  "1003"
                                ]
                              },
                              "Error_Message": {
                                "type": "string",
                                "example": "402 - Incorrect internet banking username or password",
                                "description": "Describes the error.",
                                "enum": [
                                  "401 - The request timed out before completing due to delays beyond our control - Customer should retry in a few minutes.",
                                  "402 - Incorrect internet banking username or password",
                                  "403 - There is a problem retrieving information from the customers internet banking. Please submit a ticket with us so we can resolve this. The bank statement will need to be retrieved manually.",
                                  "404 - Temporary technical difficulties are causing a problem, fetching the bank statement is failing after logging in. The customer can try again as this is temporary however please also log a ticket with us for investigation.",
                                  "405 - The request cannot be completed because the request was canceled. The customer may have logged into their banking site at the same time. Please ask the customer to try again.",
                                  "406 - The customers password has expired with their internet banking site. They will have to change the password and try again.",
                                  "407 - The customer's bank account is locked and cant be logged into.",
                                  "408 - It appears the customer’s accounts are not linked to their internet banking. Please have the customer link their accounts to their internet banking and then try again.",
                                  "409 - Internet Banking site has errored after verifying login, this is usually a temporary error. If the problem is persisting, please log a ticket for escalation.",
                                  "ing - Customer should retry in a few minutes.",
                                  "413 - There is a problem retrieving information from the customers internet banking. Please submit a ticket with us so we can resolve this. The bank statement will need to be retrieved manually.",
                                  "414 - The customers banking site says the requested account was not found at the site.",
                                  "415 - The request cannot be completed due to technical difficulties at the internet banking site.",
                                  "416 - The request cannot be completed as another attempt to login to their internet banking was already established at the same time.",
                                  "419 - Unexpected changes to the bank’s site. Please ask the customer to supply manually, this problem should be resolved in a few days.",
                                  "422 - We were unable to retrieve the account information because it appears one or more of the related accounts have been closed.",
                                  "424 - Internet Banking site is showing a maintenance window message, the customer will need to wait till the maintenance is complete to continue.",
                                  "428 - The customers banking site requires that the consumer accept new terms and conditions. After this has been accepted re-run this application.",
                                  "429 - The internet banking site is requesting an update of personal information thats blocking the statement collection process, Please ask the customer to log in and resolve before attempting a new application.",
                                  "470 - The request cannot be completed because the payee site requires that the consumer contact customer support.",
                                  "505 - We do not currently support the security system used by this bank, we apologise for any inconvenience.",
                                  "507 - This bank is in beta, Yodlee is providing data updates for this bank but it is not out of beta and reports are not completing successfully yet.",
                                  "508 - The request timedout when processing, the customer should retry.",
                                  "509 - The customers banking site says information provided is no longer valid at the site.",
                                  "518 - The required additional authentication information was unavailable. Please try again.",
                                  "520 - Authentication Information Incorrect: The additional authentication information provided is incorrect. Please retry.",
                                  "522 - Request has timedout at our data provider, please try to run again.",
                                  "523 - We're sorry, the authentication information you provided is incorrect. Please try again.",
                                  "525 - The request timedout when processing, the customer should retry.",
                                  "801 - This is an intermittent issue with our data provider. Please ask the customer to try again, if the problem persists please lodge a ticket.",
                                  "802 - This is an intermittent issue with our data provider. Please ask the customer to try again, if the problem persists please lodge a ticket.",
                                  "1000 - The request timed out when processing, the customer should retry.",
                                  "1001 - The request timed out when processing, the customer should retry.",
                                  "1002 - The request timed out when processing, the customer should retry.",
                                  "1003 - The request timed out when processing, the customer should retry."
                                ]
                              },
                              "Create_Dt": {
                                "type": "string",
                                "example": "2020-03-12 01:43:31.223 +00:00",
                                "description": "The date and time the application was created."
                              },
                              "Modify_Dt": {
                                "type": "string",
                                "example": "2020-03-12 01:44:14.467 +00:00",
                                "description": "The date and time the application was modified."
                              },
                              "Client_Name": {
                                "type": "string",
                                "example": "Dev",
                                "description": "Denotes the Store object for the retrieved report."
                              },
                              "Client_Code": {
                                "type": "string",
                                "example": "PICK01",
                                "description": "The unique code to identify the Store."
                              },
                              "Centrelink_Status": {
                                "type": "string",
                                "description": "Denotes the status for myGov or WINZ supporting documents.",
                                "enum": [
                                  "Receiving_Logons",
                                  "Processing",
                                  "Error",
                                  "Success"
                                ]
                              },
                              "Refresh_Authority": {
                                "type": "object",
                                "nullable": true,
                                "description": "The refresh authority object of the application. If there's no refresh authority for the application, the object will have a `NULL` value.",
                                "properties": {
                                  "Is_Active": {
                                    "type": "boolean",
                                    "description": "Denotes whether the refresh authority is active for the application.",
                                    "example": true
                                  },
                                  "Is_Revoke_By_Customer": {
                                    "type": "boolean",
                                    "example": false,
                                    "description": "Denotes whether the customer has revoked the refresh authority for the application."
                                  },
                                  "Revoke_Dt": {
                                    "type": "string",
                                    "example": "2020-04-07 14:22:38.244 +00:00",
                                    "description": "Denotes the date and time the customer revoked the refresh authority."
                                  },
                                  "Create_Dt": {
                                    "type": "string",
                                    "example": "2020-04-06 22:50:35.867 +00:00",
                                    "description": "Denotes the creation date and time of the refresh authority."
                                  },
                                  "End_Dt": {
                                    "type": "string",
                                    "example": "2020-10-03 14:00:00.000 +00:00",
                                    "description": "Denotes the expiration date and time of the refresh authority."
                                  }
                                }
                              }
                            },
                            "required": [
                              "App_ID",
                              "App_Ref",
                              "Status",
                              "Create_Dt",
                              "Modify_Dt",
                              "Client_Name",
                              "Client_Code",
                              "Centrelink_Status"
                            ]
                          }
                        },
                        "Current_Dt": {
                          "type": "string",
                          "description": "Denotes the current date and time for the server when the response was generated. To get a list of all applications that have changed since this call, pass the `Current_Dt` value in as `the `From` date in your call.",
                          "example": "2020-04-26 20:37:44.530 +00:00"
                        },
                        "Last_App_Dt": {
                          "type": "string",
                          "example": "2020-04-14 22:10:53.253 +00:00",
                          "description": "Denotes the modification date and time of the most recent application that matches the search criteria."
                        },
                        "Count": {
                          "type": "integer",
                          "description": "Denotes the number of applications included in the response.",
                          "example": 15,
                          "maximum": 500
                        },
                        "Total": {
                          "type": "integer",
                          "example": 15,
                          "description": "Denotes the total number of applications that match the search criteria."
                        }
                      }
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "description": "Invalid Post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the search was successfully executed."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            1,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "Invalid date format. ISO 8601 Standard dates must be provided.",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "General"
        ],
        "description": "### Overview\nRetrieve applications that match the specified search criteria. \n\nReasons to use this endpoint:\n- Monitor for completed applications via periodic polling (as an alternative to or in conjunction with asynchronous webhooks).\n- Check the status of an in-progress application based on the App ID or reference.\n- Check for failed/errored applications.\n\n### Date format\nDates included in your request in `$.Payload.Date_Range.From` and `$.Payload.Date_Range.To` are expected in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format. i.e. `yyyy-MM-dd hh:mm:ss.fff T`\n\n| Portion | Example | Description                                                |\n|---------|---------|------------------------------------------------------------|\n| yyyy    | 2016    | The full year                                              |\n| MM      | 04      | The month, with leading zeros                              |\n| dd      | 08      | The day, with leading zeros                                |\n| hh      | 16      | Hours (24 hour time), with leading zeros                   |\n| mm      | 45      | Minutes, with leading zeros                                |\n| ss      | 53      | Seconds, with leading zeros                                |\n| .fff    | .654300 | Factions of a second, 6 decimal places with trailing zeros |\n| T       | +10:00  | The timezone offset                                        |\n\n**Notes:**\n- If you provide your local time, make sure you include your timezone offset.\n- Dates will be returned in UTC.\n- Although ISO standard dates support providing only the date portion, to avoid confusion it is recommended you always pass full date and time for the `$.Payload.Date_Range.To` object. If no time is provided, the default `00:00:00.000000` time is assumed.\n\n### Pagination\nA maximum of 500 results will be returned for calls to this endpoint. If you receive a `$.Response.Total` that is larger than the `$.Response.Count`, you should repeat the call but with `$.Payload.Date_Range.From` set to the returned `$.Response.Last_App_Dt`, to get the rest of the applications. You may need to do this multiple times to get all of the available applications.\n\n### Duplicate applications\nIt is possible to receive the same application in different date ranges. It's important that you handle this accordingly.\n\nThere are two reasons this happens: \n1. When applications are changed in some way, their `$.Response.Applications.Modify_Dt` will change, making them applicable for different date ranges. \n2. If your search returns more than the maximum number of results, when the results are returned paginated you may have the last application of your _first_ call appear as the first of your _second_ call. See the example below.\n\n#### Example\n| App | Modify_Dt | Returned in    |\n|-----|-----------|----------------|\n| A   | 1         | Call 1         |\n| B   | 2         | Call 1         |\n| C   | 2         | Call 1         |\n| D   | 2         | Call 1         |\n| E   | 3         | Call 1, Call 2 |\n| F   | 3         |         Call 2 |\n| G   | 4         |         Call 2 |\n\n**Call 1 response** `$.Response.Count: 5`, `$.Response.Total: 7`, `$.Response.Last_App_Date: 3`\n\n**Call 2 request** `$.Payload.Date_Range.From: 3` | **Call 2 response** `$.Response.Count: 3`, `$.Response.Total: 3`, `$.Response.Last_App_Date: 4`",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          1,
                          99,
                          100,
                          101,
                          102
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "properties": {
                      "App_ID": {
                        "type": "array",
                        "example": [
                          1234567
                        ],
                        "description": "Our unique identifiers for the applications.",
                        "items": {
                          "type": "integer",
                          "example": 1234567
                        }
                      },
                      "App_Ref": {
                        "type": "array",
                        "example": [
                          "B123"
                        ],
                        "description": "Your references for the applications.",
                        "items": {
                          "type": "string",
                          "example": "B123"
                        }
                      },
                      "Status": {
                        "type": "array",
                        "example": [
                          "Complete"
                        ],
                        "description": "The statuses to filter the applications by.",
                        "items": {
                          "type": "string",
                          "enum": [
                            "Quick Link",
                            "Receiving Logons",
                            "Processing",
                            "Complete",
                            "Error"
                          ]
                        }
                      },
                      "Client_Code": {
                        "type": "array",
                        "example": [
                          "PICK01"
                        ],
                        "description": "Allows limiting of results by Store codes.",
                        "items": {
                          "type": "string",
                          "example": "PICK01"
                        }
                      },
                      "Date_Range": {
                        "type": "object",
                        "properties": {
                          "From": {
                            "type": "string",
                            "example": "2020-04-19 15:24:05.000000 +10:00",
                            "description": "Allows limiting of results to those applications modified after this date."
                          },
                          "To": {
                            "type": "string",
                            "example": "2020-04-26 15:24:05.000000 +10:00",
                            "description": "Allows limiting of results to those applications modified before this date."
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n\n| Error code | Error type             | Error description                                                |\n|------------|------------------------|------------------------------------------------------------------|\n| 1          | Data Error             | Invalid date format. ISO 8601 Standard dates must be provided.   |\n| 99         | Unknown Error          | Unknown Error                                                    |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time            |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed) |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                     |"
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/statistics": {
      "post": {
        "summary": "Get statistics",
        "operationId": "post-statistics",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "properties": {
                        "ThisDay": {
                          "type": "integer",
                          "description": "Denotes the number of applications today.",
                          "example": 12
                        },
                        "PrevDay": {
                          "type": "integer",
                          "description": "Denotes the number of applications yesterday.",
                          "example": 40
                        },
                        "ThisWeek": {
                          "type": "integer",
                          "description": "Denotes the number of applications from Monday until now.",
                          "example": 103
                        },
                        "PrevWeek": {
                          "type": "integer",
                          "description": "Denotes the number of applications Monday and Sunday last week.",
                          "example": 707
                        },
                        "ThisMonth": {
                          "type": "integer",
                          "description": "Denotes the number of applications this calendar month so far.",
                          "example": 1440
                        },
                        "PrevMonth": {
                          "type": "integer",
                          "description": "Denotes the number of applications last calendar month.",
                          "example": 8502
                        },
                        "Total": {
                          "type": "integer",
                          "description": "Denotes the total number of applications for all time.",
                          "example": 400358
                        },
                        "FirstDate": {
                          "type": "string",
                          "description": "Denotes the date of the oldest application.",
                          "example": "2019-09-14"
                        },
                        "LastDate": {
                          "type": "string",
                          "description": "Denotes the date of the most recent application.",
                          "example": "2020-04-27"
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether statistics were successfully retrieved."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing parameters or invalid values for parameters.",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            },
            "description": "Invalid Post"
          }
        },
        "description": "### Overview\nRetrieve statistics on the number of applications completed.\n\nReasons to use this endpoint:\n- Monitor the number of Credit Sense applications completed over time.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          99,
                          100,
                          101,
                          102
                        ]
                      }
                    }
                  }
                },
                "required": [
                  "Settings"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                     |\n|------------|------------------------|-------------------------------------------------------|\n| 99         | Unknown Error          | Unknown Error                                         |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time |\n| 101        | Invalid Post           | Missing parameters or invalid values for parameters.  |\n| 102        | Authentication failure | Invalid API_Key or API_Token                          |"
        },
        "tags": [
          "General"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/transferAppOwner": {
      "post": {
        "summary": "Grant access permissions for an app",
        "operationId": "post-transferAppOwner",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Denotes whether the report was successfully retrieved."
                    },
                    "Response": {
                      "type": "string",
                      "example": "Transfer Successful",
                      "description": "Indicates the successful transfer of the application."
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the search was successfully executed."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            1,
                            2,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "Invalid Credit Sense application",
                            "Destination store is invalid or not authorised",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters. (The missing parameters will be listed)",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            },
            "description": "Invalid Post"
          }
        },
        "description": "### Overview\nGrant access permissions for applications to another Store.\nTransfers are only permitted to Stores within the same Client Group.\n\nReasons to use this endpoint:\n- Provide access to an application via another Store.",
        "tags": [
          "General"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          1,
                          2,
                          99,
                          100,
                          101,
                          102
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "properties": {
                      "App_ID": {
                        "type": "integer",
                        "example": 1234567,
                        "description": "Our unique identifier for the application."
                      },
                      "App_Ref": {
                        "example": "B123",
                        "description": "Your reference for the application.",
                        "type": "string"
                      },
                      "Dest_Client_ID": {
                        "type": "string",
                        "description": "Denotes the destination Store ID.",
                        "example": "1707"
                      },
                      "Dest_Client_Code": {
                        "type": "string",
                        "description": "Denotes the destination Store code.",
                        "example": "PICK02"
                      },
                      "Dest_App_Ref": {
                        "type": "string",
                        "description": "Your reference for the new application in the destination Store.",
                        "example": "C123"
                      },
                      "Dest_Use_Existing_Ref": {
                        "type": "boolean",
                        "default": "true",
                        "description": "Denotes whether your existing identifier will be used on the new application in the destination Store if a new identifier isn't provided.",
                        "example": true
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                                |\n|------------|------------------------|------------------------------------------------------------------|\n| 1          | Data Error             | Invalid Credit Sense application                                 |\n| 2          | Data Error             | Destination store is invalid or not authorised                   |\n| 99         | Unknown Error          | Unknown Error                                                    |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time            |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed) |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                     |"
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/blacklist/add": {
      "post": {
        "summary": "Add applicant to a blacklist",
        "operationId": "post-blacklist-add",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Denotes whether the application was successfully added to the blacklist."
                    },
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the application."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "description": "Invalid Post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the search was successfully executed."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            1,
                            2,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "Invalid Credit Sense AppID or not authorised for AppID",
                            "Invalid Blacklist Code or not authorised for Blacklist",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          1,
                          2,
                          99,
                          100,
                          101,
                          102
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Blacklist_Code",
                      "App_ID",
                      "Blacklist_Reason_Code",
                      "Expiry_DT"
                    ],
                    "properties": {
                      "Blacklist_Code": {
                        "type": "string",
                        "description": "Our unique identifier for the blacklist.",
                        "example": "PICKLIST"
                      },
                      "App_ID": {
                        "type": "integer",
                        "description": "Our unique identifier for the application.",
                        "example": 1234567
                      },
                      "Blacklist_Reason_Code": {
                        "type": "string",
                        "description": "The reason you're adding the application to the blacklist.",
                        "enum": [
                          "BADDEBT",
                          "FRAUD"
                        ]
                      },
                      "Expiry_DT": {
                        "type": "string",
                        "example": "2020-05-04",
                        "description": "The date this blacklist entry will expire and the application will be removed from the blacklist."
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                                |\n|------------|------------------------|------------------------------------------------------------------|\n| 1          | Data Error             | Invalid Credit Sense AppID or not authorised for AppID           |\n| 2          | Data Error             | Invalid Blacklist Code or not authorised for Blacklist           |\n| 99         | Unknown Error          | Unknown Error                                                    |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time            |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed) |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                     |"
        },
        "tags": [
          "Blacklist applicants"
        ],
        "description": "### Overview\nAdd an applicant to your blacklist for use in Lead Market.\n\nWhen an application is provided to this endpoint, we'll identify the customer based on this and any related applications they've completed and blacklist them.\n\n**In order to use this API endpoint we need to create a blacklist for you and enable access to it for your environment. Please contact us to have this feature configured.**\n\nReasons to use this endpoint:\n- Avoid buying the same lead again in Lead Market by blacklisting the customer based on their Credit Sense report.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/blacklist/delete": {
      "post": {
        "summary": "Remove applicant from a blacklist",
        "operationId": "post-blacklist-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Denotes whether the application was successfully added to the blacklist."
                    },
                    "Response": {
                      "type": "array",
                      "description": "If no applicants were removed from the blacklist, this will be returned as an empty array.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the application."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "description": "Invalid Post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the application was successfully added to the blacklist."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            1,
                            2,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "Invalid Credit Sense AppID or not authorised for AppID",
                            "Invalid Blacklist Code or not authorised for Blacklist",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters. (The missing parameters will be listed)",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "example": 100
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Blacklist_Code",
                      "App_ID",
                      "Remove_Reason_Code"
                    ],
                    "properties": {
                      "Blacklist_Code": {
                        "type": "string",
                        "description": "Our unique identifier for the blacklist.",
                        "example": "PICKLIST"
                      },
                      "App_ID": {
                        "type": "integer",
                        "description": "Our unique identifier for the application.",
                        "example": 1234567
                      },
                      "Remove_Reason_Code": {
                        "type": "string",
                        "description": "The reason you're removing the application from the blacklist.",
                        "enum": [
                          "EXPIRED",
                          "MISTAKE",
                          "PAID"
                        ]
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                                |\n|------------|------------------------|------------------------------------------------------------------|\n| 1          | Data Error             | Invalid Credit Sense AppID or not authorised for AppID           |\n| 2          | Data Error             | Invalid Blacklist Code or not authorised for Blacklist           |\n| 99         | Unknown Error          | Unknown Error                                                    |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time            |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed) |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                     |"
        },
        "tags": [
          "Blacklist applicants"
        ],
        "description": "### Overview\nRemove an applicant from your blacklist.\n\nWhen an application is provided to this endpoint, we'll identify the customer based on this and any related applications they've completed and remove them all from your blacklist.\n\n**In order to use this API endpoint we need to create a blacklist for you and enable access to it for your environment. Please contact us to have this feature configured.**\n\nReasons to use this endpoint:\n- Remove a customer from the blacklist so they may be bought as a lead in Lead Market.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/blacklist/view": {
      "post": {
        "summary": "View applicants on a blacklist",
        "operationId": "post-blacklist-view",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Denotes whether the application was successfully added to the blacklist."
                    },
                    "Response": {
                      "type": "array",
                      "description": "If no applicants exist on the blacklist, this will be returned as an empty array.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the application."
                          },
                          "Expiry_DT": {
                            "type": "string",
                            "example": "2020-08-04",
                            "description": "The date this blacklist entry will expire and the application will be removed from the blacklist."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "description": "Invalid Post",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the application was successfully added to the blacklist."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            2,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid Blacklist Code or not authorised for Blacklist",
                          "enum": [
                            "Invalid Blacklist Code or not authorised for Blacklist",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters. (The missing parameters will be listed)",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "example": 100
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Blacklist_Code"
                    ],
                    "properties": {
                      "Blacklist_Code": {
                        "type": "string",
                        "description": "Our unique identifier for the blacklist.",
                        "example": "PICKLIST"
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                                |\n|------------|------------------------|------------------------------------------------------------------|\n| 2          | Data Error             | Invalid Blacklist Code or not authorised for Blacklist           |\n| 99         | Unknown Error          | Unknown Error                                                    |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time            |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed) |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                     |"
        },
        "tags": [
          "Blacklist applicants"
        ],
        "description": "### Overview\nView applicants on your blacklist.\n\n**In order to use this API endpoint we need to create a blacklist for you and enable access to it for your environment. Please contact us to have this feature configured.**\n\nReasons to use this endpoint:\n- View all applicants currently on your blacklist to assess which leads you're excluding from being purchased on Lead Market.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ]
      }
    },
    "/quicklinks": {
      "post": {
        "summary": "Search for quick links",
        "operationId": "post-quicklinks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "Token": {
                            "type": "string",
                            "description": "Our token that identifies the quick link.",
                            "example": "fun6"
                          },
                          "Message": {
                            "type": "string",
                            "example": "apply/PICK01/?method=standard&applicationID=1234567&appRef=B123&uniqueAppRef=true",
                            "description": "The portion of the URL following `https://creditsense.com.au/` once the quick link is expanded."
                          },
                          "Create_Date": {
                            "type": "string",
                            "example": "2020-04-03 16:18:19.8466667",
                            "description": "The date and time the quick link was created."
                          },
                          "Expire_Date": {
                            "type": "string",
                            "example": "2020-04-10 16:18:19.8466667",
                            "description": "The date and time the quick link is scheduled to expire."
                          },
                          "Is_Expired": {
                            "type": "boolean",
                            "example": false,
                            "description": "Denotes whether the quick link has expired."
                          },
                          "Is_Emailed": {
                            "type": "boolean",
                            "example": false,
                            "description": "Denotes whether the quick link has been emailed."
                          },
                          "Is_Clicked": {
                            "type": "boolean",
                            "example": false,
                            "description": "Denotes whether the quick link has been clicked."
                          },
                          "Store_Code": {
                            "type": "string",
                            "example": "PICK01",
                            "description": "The unique code to identify the Store."
                          },
                          "Store": {
                            "type": "string",
                            "description": "The name of the Store.",
                            "example": "PickFin - Dev"
                          },
                          "App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the application."
                          },
                          "Client_App_Reference": {
                            "type": "string",
                            "example": "B123",
                            "description": "Your reference for the application."
                          },
                          "Notify_Name": {
                            "type": "string",
                            "example": "Buzz Lightyear",
                            "description": "The name provided when the quick link was created."
                          },
                          "Notify_Email": {
                            "type": "string",
                            "example": "buzz@beyondinfinity.com",
                            "description": "The email address provided when the quick link was created."
                          },
                          "Notify_Mobile": {
                            "type": "string",
                            "example": "+61488853631",
                            "description": "The mobile/cell number provided when the quick link was created."
                          },
                          "Notify_Email_Status": {
                            "type": "string",
                            "example": "Not Sent",
                            "description": "Indicates the current status of the quick link email."
                          },
                          "Notify_Mobile_Status": {
                            "type": "string",
                            "example": "Not Sent",
                            "description": "Indicates the current status of the quick link SMS."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nRetrieve a list of quick links that match your search criteria.\n\nReasons to use this endpoint:\n- Retrieve a list of quick links that match search parameters.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will get a list of quick links.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to get a list of quicklinks via API call (c#)\n        /// </summary>\n        public static RootObject GetList()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxxx-xxxx-xxxx-xxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxxx-xxxx-xxxx-xxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"Sort_By_Expiry_Date_Asc\\\":\\\"0\\\"\"; \n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Response.Count > 0 && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return quicklink object\n        /// </summary>\n        public class QuickLink\n        {\n            public string Token { get; set; }\n            public string Message { get; set; }\n            public string Create_Date { get; set; }\n            public string Expire_Date { get; set; }\n            public bool Is_Expired { get; set; }\n            public bool Is_Emailed { get; set; }\n            public bool Is_Clicked { get; set; }\n            public string Store_Code { get; set; }\n            public string Store { get; set; }\n            public int App_ID { get; set; }\n            public string Client_App_Reference { get; set; }\n            public string Notify_Name { get; set; }\n            public string Notify_Email { get; set; }\n            public string Notify_Mobile { get; set; }\n            public string Notify_Email_Status { get; set; }\n            public string Notify_Mobile_Status { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public List<QuickLink> Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will get a list of quick links.\n\npublic function OnGetQuickLinkList()\n{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('Sort_By_Expiry_Date_Asc' => 0);\n \n        // do the get list api call to retrieve quicklinks\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            echo 'OK';\n            // check quicklinks with success status\n            if (count($result['Response']) > 0) {\n                foreach ($result['Response'] as $app) {\n                    // retrieve details from the response\n                    $token = $app[\"Token\"];\n                    $appId = $app[\"App_ID\"];\n \n                    echo \"done: \" . $token . \"<br>\";\n                }\n            }\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "properties": {
                      "Store_ID": {
                        "type": "integer",
                        "description": "The unique ID to identify the Cli.",
                        "example": 123
                      },
                      "Search_Keyword": {
                        "type": "string",
                        "example": "Pickle",
                        "description": "A keyword that will be matched against the application reference, quick link token, or App ID."
                      },
                      "Is_Emailed": {
                        "type": "boolean",
                        "example": false,
                        "description": "Denotes whether to filter results by quick links that have been emailed."
                      },
                      "Is_Clicked": {
                        "type": "boolean",
                        "example": false,
                        "description": "Denotes whether to filter results by quick links that have been clicked."
                      },
                      "Sort_By_Expiry_Date_Asc": {
                        "type": "integer",
                        "default": 0,
                        "enum": [
                          0,
                          1
                        ],
                        "description": "Denotes whether to sort results by the expiry date, with oldest results displayed first."
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/quicklinks/create": {
      "post": {
        "summary": "Create a quick link",
        "operationId": "post-quicklinks-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "required": [
                        "Token"
                      ],
                      "properties": {
                        "Token": {
                          "type": "string",
                          "example": "fun6",
                          "description": "Denotes whether the SMS was successfully sent to the provided cell/mobile number."
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nCreate a quick link.\n\nReasons to use this endpoint:\n- Create a quick link token a customer can use to complete Credit Sense.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will create a quick link.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to create a quicklink via API call (c#)\n        /// </summary>\n        public static RootObject Create()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks/create\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"App_reference\\\":\\\"test\\\",\";\n            postBody += \"\\\"Store_Code\\\":\\\"TEST03\\\",\";\n            postBody += \"\\\"Bank_ID\\\":\\\"null\\\",\";\n            postBody += \"\\\"Is_Centrelink_Required\\\":\\\"null\\\"\"; \n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return quicklink object\n        /// </summary>\n        public class QuickLink\n        {\n            public string Token { get; set; }\n            public string Message { get; set; }\n            public string Create_Date { get; set; }\n            public string Expire_Date { get; set; }\n            public bool Is_Expired { get; set; }\n            public bool Is_Emailed { get; set; }\n            public bool Is_Clicked { get; set; }\n            public string Store_Code { get; set; }\n            public string Store { get; set; }\n            public int App_ID { get; set; }\n            public string Client_App_Reference { get; set; }\n            public string Notify_Name { get; set; }\n            public string Notify_Email { get; set; }\n            public string Notify_Mobile { get; set; }\n            public string Notify_Email_Status { get; set; }\n            public string Notify_Mobile_Status { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public QuickLink Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will create a quick link.\n\n//public function OnCreateQuickLink()\n//{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('App_reference' => 'test', 'Store_Code' => 'TEST03', 'Bank_ID' => null, 'Is_Centrelink_Required' => null);\n \n        // post data to the endpoint\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks/create');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            $ql = $result['Response'];\n            echo 'OK';\n            echo $ql['Token'];\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n//}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Store_Code"
                    ],
                    "properties": {
                      "App_reference": {
                        "type": "string",
                        "description": "Your reference for the quick link.",
                        "example": "B123"
                      },
                      "Store_Code": {
                        "type": "string",
                        "description": "Denotes the Store the quick link will be generated in.",
                        "example": "PICK01"
                      },
                      "Bank_ID": {
                        "type": "integer",
                        "description": "Denotes the default bank for the quick link.",
                        "example": 30
                      },
                      "Is_Centrelink_Required": {
                        "type": "string",
                        "description": "Denotes whether to the customer will be required to provide myGov or WINZ credentials to retrieve supporting docs.",
                        "enum": [
                          "skip",
                          "force"
                        ]
                      },
                      "Is_Unique_Reference": {
                        "type": "boolean",
                        "description": "Denotes whether your reference for the quick link is unique.\nIf set to false, your reference will be used with the date and time of the application appended to it.",
                        "example": false
                      },
                      "Is_Link_To_Existing_App": {
                        "type": "boolean",
                        "example": false,
                        "description": "Denotes that an application with your reference already exists in an incomplete state, and this quick link is related to that existing application."
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/quicklinks/sms": {
      "post": {
        "summary": "Send a quick link via SMS",
        "operationId": "post-quicklinks-sms",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "required": [
                        "Success"
                      ],
                      "properties": {
                        "Success": {
                          "type": "boolean",
                          "description": "Denotes whether we successfully sent the SMS.",
                          "example": true
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nRequest the specified quick link be sent to the provided cell/mobile number.\n\nReasons to use this endpoint:\n- Send a quick link via SMS to a customer.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will send a quicklink via SMS.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to sms a quicklink via API call (c#)\n        /// </summary>\n        public static RootObject SmsQuickLink()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks/sms\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"Token\\\":\\\"xxxx\\\",\";\n            postBody += \"\\\"Name\\\":\\\"test\\\",\";\n            postBody += \"\\\"Mobile\\\":\\\"+61400000000\\\"\";\n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return success response object\n        /// </summary>\n        public class Response\n        {\n            public bool Success { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public Response Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will send a quicklink via SMS.\n\n//public function OnSmsQuickLink()\n//{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('Token' => 'xxxx', 'Name' => 'test', 'Mobile' => '+61400000000');\n \n        // post data to the endpoint\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks/sms');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            $ql = $result['Response'];\n            echo 'OK';\n            echo $ql['Success'];\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n//}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Token",
                      "Name",
                      "Mobile"
                    ],
                    "properties": {
                      "Token": {
                        "type": "string",
                        "description": "Our unique reference for the quick link.\nThe format for a complete quick link  `https://creditsense.com.au/q/{token}`.",
                        "example": "fun6"
                      },
                      "Name": {
                        "type": "string",
                        "description": "The name of the customer you want the quick link sent to. Their name will be displayed in the SMS content.",
                        "example": "Arthur Dexter Bradley"
                      },
                      "Mobile": {
                        "type": "string",
                        "description": "The cell/mobile number the quick link will be sent to.",
                        "example": "+61488853631"
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/quicklinks/email": {
      "post": {
        "summary": "Send a quick link via email",
        "operationId": "post-quicklinks-email",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "required": [
                        "Success"
                      ],
                      "properties": {
                        "Success": {
                          "type": "boolean",
                          "description": "Denotes whether we successfully sent the email.",
                          "example": true
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nRequest the specified quick link be sent to the provided email address.\n\nReasons to use this endpoint:\n- Send a quick link via email to a customer.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will send a quicklink via email.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to email a quicklink via API call (c#)\n        /// </summary>\n        public static RootObject EmailQuickLink()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks/email\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"Token\\\":\\\"zso1\\\",\";\n            postBody += \"\\\"Name\\\":\\\"test\\\",\";\n            postBody += \"\\\"Email\\\":\\\"test@email.com\\\"\";\n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return success response object\n        /// </summary>\n        public class Response\n        {\n            public bool Success { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public Response Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will send a quicklink via email.\n\n//public function OnEmailQuickLink()\n//{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('Token' => 'zso1', 'Name' => 'test', 'Email' => 'test@email.com');\n \n        // post data to the endpoint\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks/email');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            $ql = $result['Response'];\n            echo 'OK';\n            echo $ql['Success'];\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n//}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Token",
                      "Name",
                      "Email"
                    ],
                    "properties": {
                      "Token": {
                        "type": "string",
                        "description": "Our unique reference for the quick link.\nThe format for a complete quick link  `https://creditsense.com.au/q/{token}`.",
                        "example": "fun6"
                      },
                      "Name": {
                        "type": "string",
                        "description": "The name of the customer you want the quick link sent to. Their name will be displayed in the email content.",
                        "example": "Arthur Dexter Bradley"
                      },
                      "Email": {
                        "type": "string",
                        "description": "The email addresss the quick link will be sent to.",
                        "example": "arthur@legitwitnesses.info"
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/quicklinks/refresh": {
      "post": {
        "summary": "Extend the expiry for a quick link",
        "operationId": "post-quicklinks-refresh",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "required": [
                        "Success"
                      ],
                      "properties": {
                        "Success": {
                          "type": "boolean",
                          "description": "Denotes whether we successfully updated the expiration date.",
                          "example": true
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nExtend the expiration date of the specified quick link to the number of days from today specified in the environment configuration.\n\nReasons to use this endpoint:\n- Extend the expiration date of an unused quick link.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will refresh a quick link.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to refresh a quicklink via API call (c#)\n        /// </summary>\n        public static RootObject Refresh()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks/refresh\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"Token\\\":\\\"zso1\\\"\";\n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return success response object\n        /// </summary>\n        public class Response\n        {\n            public bool Success { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public Response Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will refresh a quick link.\n\n//public function OnRefreshQuickLink()\n//{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('Token' => 'xxxx');\n \n        // post data to the endpoint\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks/refresh');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            $ql = $result['Response'];\n            echo 'OK';\n            echo $ql['Success'];\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n//}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Token"
                    ],
                    "properties": {
                      "Token": {
                        "type": "string",
                        "description": "Our unique reference for the quick link.\nThe format for a complete quick link  `https://creditsense.com.au/q/{token}`.",
                        "example": "fun6"
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/quicklinks/delete": {
      "post": {
        "summary": "Expire a quick link",
        "operationId": "post-quicklinks-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "required": [
                        "Success"
                      ],
                      "properties": {
                        "Success": {
                          "type": "boolean",
                          "description": "Denotes whether we successfully expired the quick link.",
                          "example": true
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nExpire the specified quick link by setting the expiry date as today's date.\n\nReasons to use this endpoint:\n- Prevent a customer from completing Credit Sense using a quick link.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will delete a quick link.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\n \nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to delete a quicklink via API call (c#)\n        /// </summary>\n        public static RootObject DeleteQuickLink()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks/delete\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"Token\\\":\\\"xxxx\\\"\";\n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return success response object\n        /// </summary>\n        public class Response\n        {\n            public bool Success { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public Response Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will delete a quick link.\n\n//public function OnDeleteQuickLink()\n//{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('Token' => 'xxxx', 'App_ID' => null);\n \n        // post data to the endpoint\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks/delete');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            $ql = $result['Response'];\n            echo 'OK';\n            echo $ql['Success'];\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n//}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "properties": {
                      "Token": {
                        "type": "string",
                        "description": "Our unique reference for the quick link.\nThe format for a complete quick link is `https://creditsense.com.au/q/{token}`.",
                        "example": "fun6"
                      },
                      "App_ID": {
                        "type": "integer",
                        "description": "Our unique identifier for the application.",
                        "example": 1234567
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/quicklinks/get": {
      "post": {
        "summary": "Get details for a quick link",
        "operationId": "post-quicklinks-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Response": {
                      "type": "object",
                      "properties": {
                        "Token": {
                          "type": "string",
                          "description": "Our token that identifies the quick link.",
                          "example": "fun6"
                        },
                        "Message": {
                          "type": "string",
                          "example": "apply/PICK01/?method=standard&applicationID=1234567&appRef=B123&uniqueAppRef=true",
                          "description": "The portion of the URL following `https://creditsense.com.au/` once the quick link is expanded."
                        },
                        "Create_Date": {
                          "type": "string",
                          "example": "2020-04-03 16:18:19.8466667",
                          "description": "The date and time the quick link was created."
                        },
                        "Expire_Date": {
                          "type": "string",
                          "example": "2020-04-10 16:18:19.8466667",
                          "description": "The date and time the quick link is scheduled to expire."
                        },
                        "Is_Expired": {
                          "type": "boolean",
                          "example": false,
                          "description": "Denotes whether the quick link has expired."
                        },
                        "Is_Emailed": {
                          "type": "boolean",
                          "example": false,
                          "description": "Denotes whether the quick link has been emailed."
                        },
                        "Is_Clicked": {
                          "type": "boolean",
                          "example": false,
                          "description": "Denotes whether the quick link has been clicked."
                        },
                        "Store_Code": {
                          "type": "string",
                          "example": "PICK01",
                          "description": "The unique code to identify the Store."
                        },
                        "Store": {
                          "type": "string",
                          "description": "The name of the Store.",
                          "example": "PickFin - Dev"
                        },
                        "App_ID": {
                          "type": "integer",
                          "example": 1234567,
                          "description": "Our unique identifier for the application."
                        },
                        "Client_App_Reference": {
                          "type": "string",
                          "example": "B123",
                          "description": "Your reference for the application."
                        },
                        "Notify_Name": {
                          "type": "string",
                          "example": "Buzz Lightyear",
                          "description": "The name provided when the quick link was created."
                        },
                        "Notify_Email": {
                          "type": "string",
                          "example": "buzz@beyondinfinity.com",
                          "description": "The email address provided when the quick link was created."
                        },
                        "Notify_Mobile": {
                          "type": "string",
                          "example": "+61488853631",
                          "description": "The mobile/cell number provided when the quick link was created."
                        },
                        "Notify_Email_Status": {
                          "type": "string",
                          "example": "Not Sent",
                          "description": "Indicates the current status of the quick link email."
                        },
                        "Notify_Mobile_Status": {
                          "type": "string",
                          "example": "Not Sent",
                          "description": "Indicates the current status of the quick link SMS."
                        }
                      }
                    }
                  },
                  "required": [
                    "Response"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 400
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Bad Request"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The server cannot or will not process the request due to an apparent client error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 401.1
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unauthorized"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 422
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Unprocessable Entity"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "The request was well-formed but was unable to be followed due to semantic errors."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 429
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Too Many Requests"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "API calls exceed a maximum of calls per minute limit."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 500
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Internal Server Error"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Internal server error."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 501
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Not Implemented"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Invalid command."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Error_Response": {
                      "type": "object",
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ],
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "example": 503
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "example": "Service Unavailable"
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "example": "Unable to service your request at this time. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "Error_Response"
                  ]
                }
              }
            }
          }
        },
        "description": "### Overview\nRetrieve details for a quick link that matches your search criteria.\n\nReasons to use this endpoint:\n- Determine whether a quick link has been sent via email or SMS to a customer.\n- Confirm the email or mobile/cell number a quick link was sent to.\n- Check when a quick link was created.\n- Check whether a quick link has expired.\n- Check whether a quick link was clicked.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "x-codeSamples": [
          {
            "lang": "C# (ASP.NET)",
            "source": "\n//This example ASP.NET wrapper code will get a quick link.\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\n//please add the above library references to your porject if they are not included yet.\n \n \nnamespace API\n{\n    public class QuicklinkCall\n    {\n        /// <summary>\n        /// this is an example to get a single quicklink via API call (c#)\n        /// </summary>\n        public static RootObject Get()\n        {\n            RootObject result = null;\n            // credit sense api request url\n            string api_url = \"https://api.creditsense.com.au\";\n            // your cridential information here\n            string api_key = \"xxxxxxx-xxxx-xxxx-xxx-xxxxxxxxxxxx\";\n            string api_token = \"xxxxxxx-xxxx-xxxx-xxx-xxxxxxxxxxxx\";\n            //api url and post body/parameters\n            string URL = api_url + \"/v2/\" + api_key + \"/quicklinks/get\";\n            string postBody = \"{\\\"Settings\\\" : {\\\"API_Token\\\":\\\"\" + api_token + \"\\\"},\\\"Payload\\\" : {\";\n            postBody += \"\\\"App_ID\\\":\\\"1000000\\\",\";\n            postBody += \"\\\"App_Reference\\\":\\\"\\\"\"; \n            postBody += \"}}\";\n            HttpWebRequest apirptreq = (HttpWebRequest)WebRequest.Create(URL);\n            apirptreq.ContentType = \"application/json\";\n            apirptreq.Method = \"POST\";\n            byte[] postString = Encoding.UTF8.GetBytes(postBody);\n            apirptreq.ContentLength = postString.Length;\n            Stream jsonStream = apirptreq.GetRequestStream();\n            jsonStream.Write(postString, 0, postString.Length);\n            jsonStream.Close();\n            // get response\n            HttpWebResponse apirsp;\n            try\n            {\n                // http status with 200\n                apirsp = (HttpWebResponse)apirptreq.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                // http status with 470\n                apirsp = (HttpWebResponse)(ex.Response);\n            }\n            using (Stream jsonRspStream = apirsp.GetResponseStream())\n            {\n                string responseStr = null;\n                using (StreamReader reader = new StreamReader(jsonRspStream))\n                {\n                    \n                    responseStr = reader.ReadToEnd();\n                    var serializer = new DataContractJsonSerializer(typeof(RootObject));\n                    var ms = new MemoryStream(Encoding.UTF8.GetBytes(responseStr));\n                    //get the return json object if reaching this point\n                    var data = (RootObject)serializer.ReadObject(ms);\n                    // you can work throught the result here\n                    if (data != null && data.Response != null && data.Error_Response == null) {\n                        //renew authority successfully\n                        System.Diagnostics.Debug.WriteLine(\"OK\");\n                    }else{\n                        // log the error on your end so that you have visibility\n                        System.Diagnostics.Debug.WriteLine(data);\n                    }\n                }\n            }\n            return result;\n        }\n        // the below classes are generate to match the api return json\n        /// <summary>\n        /// return quicklink object\n        /// </summary>\n        public class QuickLink\n        {\n            public string Token { get; set; }\n            public string Message { get; set; }\n            public string Create_Date { get; set; }\n            public string Expire_Date { get; set; }\n            public bool Is_Expired { get; set; }\n            public bool Is_Emailed { get; set; }\n            public bool Is_Clicked { get; set; }\n            public string Store_Code { get; set; }\n            public string Store { get; set; }\n            public int App_ID { get; set; }\n            public string Client_App_Reference { get; set; }\n            public string Notify_Name { get; set; }\n            public string Notify_Email { get; set; }\n            public string Notify_Mobile { get; set; }\n            public string Notify_Email_Status { get; set; }\n            public string Notify_Mobile_Status { get; set; }\n        }\n        /// <summary>\n        /// return error resonse object\n        /// </summary>\n        public class ErrorResponse\n        {\n            public float Error_Code { get; set; }\n            public string Error_Type { get; set; }\n            public string Error_Description { get; set; }\n        }\n        /// <summary>\n        /// return json object - root level\n        /// </summary>\n        public class RootObject\n        {\n            public QuickLink Response { get; set; }\n            public ErrorResponse Error_Response { get; set; }\n        }\n    }\n}\n"
          },
          {
            "lang": "PHP",
            "source": "\n//This example PHP wrapper code will get a quick link.\n\npublic function OnGetQuickLink()\n{\n    try {\n        // credit sense api request url\n        $apiUrl = 'https://api.creditsense.com.au';\n \n        // credit sense api details (replace with your details, listed at ...)\n        $apiKey = 'xxxxxxx-xxxx-xxxx-xxx-xxxxxxxxxxxx';\n        $apiToken = 'xxxxxxx-xxxx-xxxx-xxx-xxxxxxxxxxxx';\n \n        // filter information\n        $filter = array('App_ID' => 1000000, 'App_Reference' => '');\n \n        // do the get single quicklink api call to retrieve quicklink\n        $postFields = array(\n            'Settings' => array('API_Token' => $apiToken),\n            'Payload' => $filter\n        );\n \n        // curl action\n        $curl = curl_init($apiUrl . '/v2/' . $apiKey . '/quicklinks/get');\n        curl_setopt($curl, CURLOPT_POST, true);\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($curl, CURLOPT_POSTFIELDS, json_encode($postFields));\n \n        $result = curl_exec($curl);\n        curl_close($curl);\n \n        $result = json_decode($result, true);\n \n        // called successfully\n        if ($result && $result['Response'] && !$result['Error_Response']) {\n            $ql = $result['Response'];\n            echo 'OK';\n            echo $ql['Token'];\n        } else {\n            // check quicklinks with error status\n            if ($result && $result['Error_Response']) {\n                // retrieve details from the response\n                $errorCode = $result['Error_Response'][\"Error_Code\"];\n                $errorType = $result['Error_Response'][\"Error_Type\"];\n                $errorDescription = $result['Error_Response'][\"Error_Description\"];\n                echo \"error: \" . $errorCode . \"<br>\";\n \n            }\n \n            // log the error on your end so that you have visibility\n            $this->logFailedApiCall($result);\n \n        }\n \n    } catch (\\Exception $e) {\n        // log the error on your end so that you have visibility\n        $this->logFailedRefresh($e);\n \n        echo $e->getMessage();\n    }\n}\n"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "string",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          "400",
                          "400.1",
                          "400.2",
                          "401",
                          "401.1",
                          "401.2",
                          "401.3",
                          "403",
                          "422",
                          "422.2",
                          "422.3",
                          "422.4",
                          "422.5"
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "properties": {
                      "App_ID": {
                        "type": "integer",
                        "example": 1234567,
                        "description": "Our unique identifier for the application."
                      },
                      "App_Reference": {
                        "type": "string",
                        "example": "B123",
                        "description": "Your reference for the quick link."
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| HTTP status codes | Error code | Error type            | Error description                                                                                                               |\n|-------------------|------------|-----------------------|---------------------------------------------------------------------------------------------------------------------------------|\n| 400               | 400        | Bad Request           | The server cannot or will not process the request due to an apparent client error.                                              |\n|                   | 400.1      | Bad Request           | The request could not be correctly parsed due to syntax error or missing the required data.                                     |\n|                   | 400.2      | Bad Request           | Empty post body.                                                                                                                |\n| 401               | 401        | Unauthorized          | Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided. |\n|                   | 401.1      | Unauthorized          | Invalid API key.                                                                                                                |\n|                   | 401.2      | Unauthorized          | Invalid API token.                                                                                                              |\n|                   | 401.3      | Unauthorized          | Invalid API key/token.                                                                                                          |\n| 403               | 403        | Forbidden             | Access denied.                                                                                                                  |\n| 422               | 422        | Unprocessable Entity  | The request was well-formed but was unable to be followed due to semantic errors.                                               |\n|                   | 422.2      | Unprocessable Entity  | The raise error code is not found.                                                                                              |\n|                   | 422.3      | Unprocessable Entity  | Quick link does not exist or is expired.                                                                                        |\n|                   | 422.4      | Unprocessable Entity  | The store code provided is not valid                                                                                            |\n|                   | 422.5      | Unprocessable Entity  | Unique AppRef already exists                                                                                                    |\n| 429               | 429        | Too Many Requests     | API calls exceed a maximum of calls per minute limit.                                                                           |\n| 500               | 500        | Internal server error | Internal server error.                                                                                                          |\n| 501               | 501        | Not Implemented       | Invalid command.                                                                                                                |\n| 503               | 503.1      | Service Unavailable   | Unable to service your request at this time. Please try again later.                                                            |"
        },
        "tags": [
          "Quick links"
        ]
      }
    },
    "/processApplication": {
      "post": {
        "summary": "Process an application",
        "operationId": "post-processApplication",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "description": "Denotes whether an application was successfully created.",
                      "example": true
                    },
                    "Response": {
                      "type": [
                        "integer",
                        "string",
                        "array"
                      ],
                      "example": 1234567,
                      "description": "One of:\n- Our unique identifier for the newly created application.\n- A single error.\n- A list of errors.",
                      "items": {
                        "type": "string"
                      }
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                },
                "examples": {
                  "Success": {
                    "value": {
                      "Success": true,
                      "Response": 1234567
                    }
                  },
                  "Failure - single error": {
                    "value": {
                      "Success": false,
                      "Response": "Reference provided already exists"
                    }
                  },
                  "Failure - multiple errors": {
                    "value": {
                      "Success": false,
                      "Response": [
                        "ERROR(s) VERIFYING XML AGAINST SCHEMA",
                        "example error 2",
                        "example error 3"
                      ]
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "### Overview\nCreate an application using data from a supported third-party.\n\nReasons to use this endpoint:\n- Submit a customer's bank data that you've received from an external source to create a Credit Sense application.",
        "tags": [
          "Credit Sense Analysis Service"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          0,
                          1,
                          2,
                          3,
                          4,
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          100
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "string",
                    "example": "<Application>\\n<Reference>MichaelTest6517542</Reference>\\n<ClientCode>PICK001</ClientCode>\\n<ApplicationDT>2016-11-03T10:41:47</ApplicationDT>\\n<Sources>\\n<Source>\\n<SourceTypeID>25</SourceTypeID>\\n<SourceType>St.George Bank</SourceType>\\n<SourceDT>2016-11-03T10:41:47</SourceDT>\\n<Accounts>\\n<Account>\\n<AccountName>Super Saver</AccountName>\\n<AccountBSB>159-314</AccountBSB>\\n<AccountNumber>898279892</AccountNumber>\\n<AccountHolderName>Michael Test</AccountHolderName>\\n<AvailableBalance>60.82</AvailableBalance>\\n<CurrentBalance>60.82</CurrentBalance>\\n<Trans>\\n<Tran>\\n<Type>credit</Type>\\n<Date>2016-10-31</Date>\\n<Amount>0.05</Amount>\\n<Narrative>Credit Interest</Narrative>\\n<RunningBalance>0.00</RunningBalance>\\n<Order>1</Order>\\n</Tran>\\n<Tran>\\n<Type>credit</Type>\\n<Date>2016-09-30</Date>\\n<Amount>0.05</Amount>\\n<Narrative>Credit Interest</Narrative>\\n<RunningBalance>0.00</RunningBalance>\\n<Order>2</Order>\\n</Tran>\\n</Trans>\\n</Account>\\n</Accounts>\\n</Source>\\n</Sources>\\n</Application>"
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                     |\n|------------|------------------------|-------------------------------------------------------|\n| 0          | Authentication failure | Invalid API_Key or API_Token                          |\n| 1          | Invalid XML            | No or multiple application data found                 |\n| 2          | Invalid XML            | No source data found                                  |\n| 3          | Invalid XML            | No account data found                                 |\n| 4          | Authentication failure | Authentication failure, invalid ClientCode            |\n| 5          | Invalid Data           | Reference provided already exists                     |\n| 6          | Invalid Data           | Invalid sourceTypeID                                  |\n| 7          | Invalid Data           | Invalid accountType                                   |\n| 8          | Invalid Data           | Invalid transaction type (must be credit/debit)       |\n| 9          | Invalid Data           | Application failed to add                             |\n| 10         | Invalid Data           | Source failed to add                                  |\n| 11         | Invalid Data           | Account failed to add                                 |\n| 12         | Invalid Data           | Transactions failed to add                            |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time |"
        }
      }
    },
    "/processApplicationCustom": {
      "post": {
        "summary": "Process an application from a third-party",
        "operationId": "post-processApplicationCustom",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "description": "Denotes whether an application was successfully created.",
                      "example": true
                    },
                    "Response": {
                      "type": "object",
                      "description": "",
                      "required": [
                        "App_ID"
                      ],
                      "properties": {
                        "App_ID": {
                          "type": "integer",
                          "example": 1234567,
                          "description": "Our unique identifier for the newly created application."
                        }
                      }
                    }
                  },
                  "required": [
                    "Success",
                    "Response"
                  ]
                },
                "examples": {
                  "Success": {
                    "value": {
                      "Success": true,
                      "Response": 1234567
                    }
                  },
                  "Failure - single error": {
                    "value": {
                      "Success": false,
                      "Response": "Reference provided already exists"
                    }
                  },
                  "Failure - multiple errors": {
                    "value": {
                      "Success": false,
                      "Response": [
                        "ERROR(s) VERIFYING XML AGAINST SCHEMA",
                        "example error 2",
                        "example error 3"
                      ]
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "470": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Success": {
                      "type": "boolean",
                      "example": false,
                      "description": "Denotes whether the report was successfully retrieved."
                    },
                    "Error_Response": {
                      "type": "object",
                      "properties": {
                        "Error_Code": {
                          "type": "number",
                          "description": "The code that identifies the error.",
                          "enum": [
                            1,
                            99,
                            100,
                            101,
                            102
                          ]
                        },
                        "Error_Type": {
                          "type": "string",
                          "description": "Denotes the type of error encountered.",
                          "enum": [
                            "Data Error",
                            "Unknown Error",
                            "Database Connectivity",
                            "Invalid Post",
                            "Authentication failure"
                          ]
                        },
                        "Error_Description": {
                          "type": "string",
                          "description": "Describes the error.",
                          "enum": [
                            "There was an error in processing.",
                            "Unknown Error",
                            "We are unable to connect to the database at this time",
                            "Missing post parameters. (The missing parameters will be listed)",
                            "Invalid API_Key or API_Token"
                          ]
                        }
                      },
                      "required": [
                        "Error_Code",
                        "Error_Type",
                        "Error_Description"
                      ]
                    }
                  },
                  "required": [
                    "Success"
                  ]
                }
              }
            },
            "description": "Invalid Post"
          }
        },
        "description": "### Overview\nCreate an application using data from a supported third-party.\n\nReasons to use this endpoint:\n- Submit a customer's bank data that you've received from a different provider to create a Credit Sense application.",
        "tags": [
          "Credit Sense Analysis Service"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "example": "c738346c-755d-4565-994c-5706ae69ee92",
                        "description": "The unique token that identifies your API access privileges."
                      },
                      "Raise_Error": {
                        "type": "integer",
                        "description": "The error code you specify will be returned in the response. \nThis is used for testing purposes only.",
                        "enum": [
                          1,
                          99,
                          100,
                          101,
                          102
                        ]
                      }
                    }
                  },
                  "Payload": {
                    "type": "object",
                    "required": [
                      "Client_Code",
                      "Type",
                      "Data_Source",
                      "Data"
                    ],
                    "properties": {
                      "Client_Code": {
                        "type": "string",
                        "example": "PICK01",
                        "description": "Denotes the destination Store code."
                      },
                      "Type": {
                        "type": "string",
                        "enum": [
                          "json",
                          "xml"
                        ],
                        "description": "The format of the data you're passing in for processing."
                      },
                      "Data_Source": {
                        "type": "string",
                        "enum": [
                          "proviso"
                        ],
                        "description": "The original source of the data you're passing in for processing."
                      },
                      "Data": {
                        "type": "string",
                        "example": "ew0KCSJyZWZlcmVuY2U...",
                        "description": "The data you want processed, in a base64 encoded string."
                      }
                    }
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Raising errors during testing\nPass an error code from the below table into `$.Settings.Raise_Error` to see how your implementation handles different errors being returned in the response.\n\n| Error code | Error type             | Error description                                                |\n|------------|------------------------|------------------------------------------------------------------|\n| 1          | Data Error             | There was an error in processing.                                |\n| 99         | Unknown Error          | Unknown Error                                                    |\n| 100        | Database Connectivity  | We are unable to connect to the database at this time            |\n| 101        | Invalid Post           | Missing post parameters. (The missing parameters will be listed) |\n| 102        | Authentication failure | Invalid API_Key or API_Token                                     |"
        }
      }
    }
  },
  "components": {
    "schemas": {}
  },
  "externalDocs": {
    "description": "Help docs",
    "url": "https://docs.creditsense.com.au"
  },
  "tags": [
    {
      "name": "General",
      "description": "Search for applications, download reports, get stats, and transfer ownership of an application."
    },
    {
      "name": "Quick links",
      "description": "Create, manage, and send quick links."
    },
    {
      "name": "Refresh",
      "description": "Manage refresh authorities and trigger refreshes on existing applications."
    },
    {
      "name": "Credit Sense Analysis Service",
      "description": "Provide transaction data that we'll use to generate Credit Sense reports."
    },
    {
      "name": "Blacklist applicants",
      "description": "View and manage blacklisted applicants."
    },
    {
      "name": "Webhooks",
      "description": "Automatically receive reports as soon as they're generated.\n\nPlease refer to our [webhook help docs](https://docs.creditsense.com.au/display/CSI/Fully+integrated+webhook#space-menu-link-content)."
    }
  ]
}