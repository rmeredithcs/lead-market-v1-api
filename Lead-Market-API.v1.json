{
  "openapi": "3.0.0",
  "info": {
    "title": "Lead Market API",
    "version": "1.0",
    "x-logo": {
      "url": "lead_market_logo.png"
    },
    "description": "The Lead Market API allows you to:\n- Create and update leads to sell via Lead Market.\n- Manage lists to avoid buying specific leads or target your buying to leads in specific areas.\n- Provide progress updates and outcomes for purchased leads.\n- Retrieve the status or details of a lead.\n- Request delivery of the Credit Sense report for a bought lead.\n- Update the reference for a lead's Credit Sense application.\n\n### About these API docs\nThese API docs are provided in OpenAPI Specification (OAS) format for your reference. Use the `Download` button atop this page to download these API docs as an OAS 3-compliant JSON document that you can import into the API client of your choice (e.g. [Postman](https://www.postman.com/), [Insomnia](https://insomnia.rest/), [Swagger Inspector](https://inspector.swagger.io/builder)).\n\n[![Run in Insomnia}](https://insomnia.rest/images/run.svg)](https://insomnia.rest/run/?label=Lead%20Market%20API&uri=https%3A%2F%2Fapi-docs.creditsense.com.au%2Flead-market%2Fv1%2FLead-Market-API.v1.json)\n\nClick the chevrons next to object names and response codes to expand out the request and response schemas.\n![alt text](/API_docs_guide.gif \"API docs guide screen recording\")\n\n### Request URL\nThe request URL is built using multiple components - `{protocol}` `{base-url}` `{version}` `{api-key}` `{endpoint}`\n1. All calls to the API must be made using the TLS **protocol** - `https://`\n2. The **base URL** is always [api.leadmarketonline.com](api.leadmarketonline.com) - `https://api.leadmarketonline.com`\n3. The current **version** is v1 - `https://api.leadmarketonline.com/v1`\n4. The **API key** will be unique to your environment - `https://api.leadmarketonline.com/v1/xxx-xxx-xxx`\n5. The **endpont** will be determined by what you're trying to do - `https://api.leadmarketonline.com/v1/xxx-xxx-xxx/exampleEndpoint`\n\n### Authentication\nEach call to the API requires:\n- **API key** - identifies your account; forms part of the request URL.\n- **API token** - identifies your access to the API; included in the `Settings` object in your request body.\n\nIf you don't have your API credentials or you'd like them to be changed, please [contact us](mailto:support@leadmarketonline.com).",
    "contact": {
      "name": "Lead Market Support",
      "url": "https://leadmarketonline.com/contact",
      "email": "support@leadmarketonline.com"
    }
  },
  "servers": [
    {
      "url": "https://api.leadmarketonline.com/v1/{api-key}",
      "description": "Lead Market API",
      "variables": {
        "api-key": {
          "default": "your-api-key-goes-here",
          "description": "The unique key that identifies your account."
        }
      }
    }
  ],
  "paths": {
    "/application/single": {
      "post": {
        "summary": "Add a lead",
        "operationId": "post-application-single",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Warnings": {
                      "type": "array",
                      "description": "A list of warnings. e.g. features that are soon to be deprecated or features that are not yet supported by the API.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "Success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully created.",
                      "default": "true"
                    },
                    "Data": {
                      "type": "object",
                      "description": "The Lead ID as an integer or an object containing the Lead ID and Lead Token.",
                      "properties": {
                        "Lead_ID": {
                          "type": "integer",
                          "example": 6605347,
                          "description": "Uniquely identifies the lead across Lead Market."
                        },
                        "Lead_Token": {
                          "type": "string",
                          "example": "zh9DSv",
                          "description": "Uniquely identifies the lead across Lead Market for the Seller."
                        }
                      }
                    }
                  },
                  "required": [
                    "Warnings",
                    "Success",
                    "Data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Errors": {
                      "type": "array",
                      "description": "A list of errors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "default": "unauthorized",
                            "description": "Denotes the type of error encountered."
                          },
                          "error_code": {
                            "type": "string",
                            "default": "401.1",
                            "description": "The code that identifies the error."
                          },
                          "error_message": {
                            "type": "string",
                            "default": "Invalid API key.",
                            "description": "Describes the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Errors"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Leads",
          "Seller"
        ],
        "description": "### Overview\nAdd a lead to Lead Market.\n\nReasons to use this endpoint:\n- Create a disengaged lead and push it into the market for sale.\n- Pass in lead details for an engaged lead that will be retrieved when the lead is pushed into the market.\n\n### Seller data validation\nWe take what may be thought of as a _laissez faire_ approach to validation on lead data passed in by Sellers. This is not done to intentionally make Buyer integrations difficult. Rather, when a Seller is passing in details via the API it’s generally due to the lead not being engaged at the time. The stance we take on this is _it’s better to have some data that **may** be invalid, than no data_. A good example is when a lead provides a valid mobile number, but they enter it in the email address field of a Seller’s website. If the Seller's form doesn't validate the data and passes it through to Lead Market, we'll accept it. We’ll provide the raw values to the Buyer, and we’ll also provided validated contact details in the `$..V_Contact_Type` and `$..V_Contact_Value` fields. We've found this approach provides the best outcome and richer lead data sets for Buyers.\n\n### Non-compliant HTTP status codes\nWe have some non-compliant status codes that are returned in place of recognised HTTP status codes when specific errors occur.\n\n#### 701: Schema Validation Error\nSchema validation errors indicate that the data you've provided is invalid XML or it doesn't conform to our Seller schema.\n\n##### Example errors\n| Error message                                                                                                                        | Possible cause                                                                                                                           |\n|--------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| Fatal Error 4: Start tag expected, '<' not found                                                                                     | Missing '<' at beginning of document.                                                                                                    |\n| Error 1872: The document has no document element.                                                                                    | Missing root element. This may also show in various other situations, including if you do not escape xml reserved characters (like \"&\"). |\n| Error 1826: Element 'Application_Date': '2016-08-10b' is not a valid value of the union type 'L_Empty_Date'.                         | Date supplied is in incorrect format.                                                                                                    |\n| Error 1843: Element 'Application': Character content other than whitespace is not allowed because the content type is 'element-only' | Some text is not properly contained in an element.                                                                                       |\n| Fatal Error 76: Opening and ending tag mismatch: Lead line 1 and Seller_Data                                                         | A tag has not been correctly opened or closed.                                                                                           |\n\n#### 702: Authentication Error\nAuthentication errors errors indicate that you're not authorised to perform the requested actions.\n\n##### Example errors\n| Error message                                                                       | Possible cause                                                                                                        |\n|-------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|\n| Invalid API_Token                                                                   | The API_Token you passed in doesn't match the API_Key you used in the url.                                            |\n| Invalid CS_App_ID for API_Token                                                     | CS_App_ID doesn't exist or doesn't belong to you.                                                                     |\n| Invalid Lead_ID for API_Token                                                       | Lead_ID doesn't exist or doesn't belong to you.                                                                       |\n| Invalid Buyer_Token for API_Token                                                   | The Buyer_Token provided does not correspond to any leads you have purchased.                                         |\n| Invalid CS_App_ID for Client_ID                                                     | If you use the optional Client_ID parameter in settings. CS_App_ID doesn't exist or doesn't belong to this Client_ID. |\n| Client_ID not valid for API_Token                                                   | The Client_ID supplied doesn't exist or doesn't belong to you.                                                        |\n| Your API Key has not been activated yet, please contact us to activate your API key | The API profile your provided credentials link to is inactive. Contact us to activate it.                             |\n\n#### 703: Data Error\nData errors indicate that there's a mismatch between multiple bits of data you've provided.\n\n##### Example errors\n| Error message                                                                                                                              | Possible cause                                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Lead_ID and CS_App_ID don't match                                                                                                          | If you have provided both Lead_ID and CS_App_ID, these two numbers don't match on our database.                                                                                            |\n| The Credit Sense application was completed more then 24 hours ago. For a lead to be sold the application must be completed within 24 hours | The CS_App_ID you have provided references a Credit Sense application that was completed more than 24 hours ago. For a lead to be sold, the application must be completed within 24 hours. |\n| The fields 'Lead_ID' and 'Buyer_Token' were both missing, please include one in your API call                                              | You have not provided either Lead_ID or Buyer_Token; one must be provided.                                                                                                                 |\n| The fields 'Lead_ID' and 'Buyer_Token' were both present, please include only one in your API call                                         | You have provided both Lead_ID and Buyer_Token; only one may be provided.                                                                                                                  |\n| Settings object key: 'App_Reference' has not been provided                                                                                 | The App_Reference parameter is missing from the API call.                                                                                                                                  |\n\n#### 704: Other Error\nOther errors indicate that there's a generic problem, not described above.\n\n| Error message                                                                                                                                                                                  | Possible cause                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|\n| The API credentials you have provided are testing credentials and you haven't provided a valid Test_Sale_Outcome. When using test credentials you must include the Test_Sale_Outcome parameter | You're testing against a dev/test org unit and failed to pass in a valid test sale outcome. |",
        "x-codeSamples": [
          {
            "lang": "XML",
            "label": "Minimal example",
            "source": "<!-- This is a payload with minimal details for an example lead -->\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Lead>\n    <Seller_Data>\n        <Client_Authority>true</Client_Authority>\n        <Customer_Authority>true</Customer_Authority>\n        <Customer_Authority_Type>Explicit</Customer_Authority_Type>\n        <CS_App_ID>1577794</CS_App_ID>\n        <Use_MLM_Flow>true</Use_MLM_Flow>\n        <Lead_Reference>MyExampleRef0001</Lead_Reference>\n    </Seller_Data>\n    <Application>\n        <Application_Date>2016-08-10</Application_Date>\n        <Amount>200</Amount>\n        <Reason>Other – Test</Reason>\n    </Application>\n    <Applicant>\n        <Applicant_Type>Primary</Applicant_Type>\n        <Person_Applicant>\n            <Title>Mr</Title>\n            <Date_Of_Birth>1980-01-01</Date_Of_Birth>\n            <Last_Name>Ward</Last_Name>\n            <First_Name>Fredrick</First_Name>\n            <Marital_Status></Marital_Status>\n            <Contact_Methods>\n                <Contact_Method>\n                    <Contact_Other>\n                        <Contact_Type>MOB</Contact_Type>\n                        <Contact_Value>0412341234</Contact_Value>\n                    </Contact_Other>\n                </Contact_Method>\n            </Contact_Methods>\n        </Person_Applicant>\n    </Applicant>\n</Lead>"
          },
          {
            "lang": "XML",
            "label": "Detailed example",
            "source": "<!-- This is a payload for with rich details an example lead -->\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Lead>\n    <Seller_Data>\n        <Client_Authority>true</Client_Authority>\n        <Customer_Authority>true</Customer_Authority>\n        <Customer_Authority_Type>Explicit</Customer_Authority_Type>\n        <CS_App_ID>1577794</CS_App_ID>\n        <Use_MLM_Flow>true</Use_MLM_Flow>\n        <Lead_Reference>MyExampleRef0001</Lead_Reference>\n    </Seller_Data>\n    <Application>\n        <Application_Date>2016-08-10</Application_Date>\n        <Interest_Rate>200</Interest_Rate>\n        <Repayment_Amount>200</Repayment_Amount>\n        <Fees>200</Fees>\n        <Type>Part Time</Type>\n        <Amount>200</Amount>\n        <Reason>Other – Test</Reason>\n        <Repayment_Cycle>weekly</Repayment_Cycle>\n        <Repayment_Count>200</Repayment_Count>\n        <Description></Description>\n    </Application>\n    <Applicant>\n        <Applicant_Type>Primary</Applicant_Type>\n        <References>\n            <Reference>\n                <Relationship_Type>Previous Employer</Relationship_Type>\n                <Known_Applicant_Years>25</Known_Applicant_Years>\n                <Person_Other>\n                    <Title>Mr</Title>\n                    <Date_Of_Birth>1980-01-01</Date_Of_Birth>\n                    <Last_Name>Smith</Last_Name>\n                    <First_Name>Harry</First_Name>\n                    <Gender>M</Gender>\n                    <Contact_Methods>\n                        <Contact_Method>\n                            <Contact_Other>\n                                <Contact_Type>MOB</Contact_Type>\n                                <Contact_Value>0423547987</Contact_Value>\n                            </Contact_Other>\n                        </Contact_Method>\n                        <Contact_Method>\n                            <Address>\n                                <Address_Line_1>19 Queen Street</Address_Line_1>\n                                <Address_Line_2></Address_Line_2>\n                                <Suburb>Brisbane CBD</Suburb>\n                                <State>QLD</State>\n                                <Postcode>4000</Postcode>\n                                <Is_Current>true</Is_Current>\n                                <Residential_Type>false</Residential_Type>\n                                <Residential_Status>1</Residential_Status>\n                                <Time_At_Address_Months>25</Time_At_Address_Months>\n                            </Address>\n                        </Contact_Method>\n                    </Contact_Methods>\n                </Person_Other>\n            </Reference>\n        </References>\n        <Financials>\n            <Financial>\n                <Detailed_Income>\n                    <Source>Employed</Source>\n                    <Type>Part Time</Type>\n                    <Frequency>weekly</Frequency>\n                    <Description></Description>\n                    <Net_Amount>4500</Net_Amount>\n                    <Gross_Amount>4500</Gross_Amount>\n                    <Is_Current>true</Is_Current>\n                </Detailed_Income>\n            </Financial>\n            <Financial>\n                <Detailed_Liability>\n                    <Type>Personal Loan</Type>\n                    <Frequency>monthly</Frequency>\n                    <Frequency_Amount>100</Frequency_Amount>\n                    <Balance>1000</Balance>\n                    <Start_Date>2015-07-25</Start_Date>\n                    <Estimated_End_Date>2017-03-01</Estimated_End_Date>\n                    <Description>true</Description>\n                </Detailed_Liability>\n            </Financial>\n            <Financial>\n                <Summary_Income>\n                    <Net_Amount>1000</Net_Amount>\n                    <Gross_Amount>1200</Gross_Amount>\n                    <Frequency>weekly</Frequency>\n                </Summary_Income>\n            </Financial>\n            <Financial>\n                <Summary_Liability>\n                    <Amount>1000</Amount>\n                    <Frequency>Part Time</Frequency>\n                </Summary_Liability>\n            </Financial>\n        </Financials>\n        <Bank_Accounts>\n            <Bank_Account>\n                <Account_Number>123456789</Account_Number>\n                <Account_Name>mytest</Account_Name>\n                <Bank_Name></Bank_Name>\n                <Account_Type>1</Account_Type>\n                <BSB>011234</BSB>\n                <Balance>0</Balance>\n                <Age_Of_Account>3</Age_Of_Account>\n            </Bank_Account>\n        </Bank_Accounts>\n        <Person_Applicant>\n            <Title>Mr</Title>\n            <Date_Of_Birth>1980-01-01</Date_Of_Birth>\n            <Last_Name>Ward</Last_Name>\n            <First_Name>Fredrick</First_Name>\n            <Gender>M</Gender>\n            <Dependents>2</Dependents>\n            <Marital_Status></Marital_Status>\n            <Contact_Methods>\n                <Contact_Method>\n                    <Contact_Other>\n                        <Contact_Type>Landline</Contact_Type>\n                        <Contact_Value>0412341234</Contact_Value>\n                    </Contact_Other>\n                </Contact_Method>\n                <Contact_Method>\n                    <Address>\n                        <Address_Line_1>5</Address_Line_1>\n                        <Address_Line_2>Eagle Street</Address_Line_2>\n                        <Suburb>Brisbane CBD</Suburb>\n                        <State>QLD</State>\n                        <Postcode>4000</Postcode>\n                        <Is_Current>true</Is_Current>\n                        <Residential_Type>false</Residential_Type>\n                        <Residential_Status>1</Residential_Status>\n                        <Time_At_Address_Months>25</Time_At_Address_Months>\n                    </Address>\n                </Contact_Method>\n            </Contact_Methods>\n        </Person_Applicant>\n        <Employment_History>\n            <Employment>\n                <Is_Current>true</Is_Current>\n                <Employment_Type>Full Time</Employment_Type>\n                <Occupation>Accountant</Occupation>\n                <Working_Hours_Weekly>40</Working_Hours_Weekly>\n                <Organisation_Name>Steel Accountants</Organisation_Name>\n                <Start_Date>2016-05-20</Start_Date>\n                <Employment_Contacts>\n                    <Person_Other>\n                        <Title>Mr</Title>\n                        <Date_Of_Birth>1980-01-01</Date_Of_Birth>\n                        <Last_Name>Johnson</Last_Name>\n                        <First_Name>James</First_Name>\n                        <Gender>M</Gender>\n                        <Contact_Methods>\n                            <Contact_Method>\n                                <Contact_Other>\n                                    <Contact_Type>MOB</Contact_Type>\n                                    <Contact_Value>047412589</Contact_Value>\n                                </Contact_Other>\n                            </Contact_Method>\n                            <Contact_Method>\n                                <Address>\n                                    <Address_Line_1>32 Albert Street</Address_Line_1>\n                                    <Address_Line_2></Address_Line_2>\n                                    <Suburb>Brisbane CBD</Suburb>\n                                    <State>QLD</State>\n                                    <Postcode>4000</Postcode>\n                                    <Is_Current>true</Is_Current>\n                                    <Residential_Type>false</Residential_Type>\n                                    <Residential_Status>1</Residential_Status>\n                                    <Time_At_Address_Months>25</Time_At_Address_Months>\n                                </Address>\n                            </Contact_Method>\n                        </Contact_Methods>\n                    </Person_Other>\n                </Employment_Contacts>\n                <Contact_Methods>\n                    <Contact_Method>\n                        <Contact_Other>\n                            <Contact_Type>Landline</Contact_Type>\n                            <Contact_Value>0726155948</Contact_Value>\n                        </Contact_Other>\n                    </Contact_Method>\n                    <Contact_Method>\n                        <Address>\n                            <Address_Line_1>21 Elizabeth Street</Address_Line_1>\n                            <Address_Line_2></Address_Line_2>\n                            <Suburb>Brisbane CBD</Suburb>\n                            <State>QLD</State>\n                            <Postcode>4000</Postcode>\n                            <Is_Current>true</Is_Current>\n                        </Address>\n                    </Contact_Method>\n                </Contact_Methods>\n            </Employment>\n            <Employment>\n                <Is_Current>false</Is_Current>\n                <Employment_Type>Full Time</Employment_Type>\n                <Occupation>Accountant</Occupation>\n                <Working_Hours_Weekly>40</Working_Hours_Weekly>\n                <Organisation_Name>We're Accountants</Organisation_Name>\n                <Start_Date>2015-08-10</Start_Date>\n                <End_Date>2016-05-10</End_Date>\n                <Employment_Contacts>\n                    <Person_Other>\n                        <Title>Mr</Title>\n                        <Date_Of_Birth>1980-01-01</Date_Of_Birth>\n                        <Last_Name>Smith</Last_Name>\n                        <First_Name>Harry</First_Name>\n                        <Gender>M</Gender>\n                        <Contact_Methods>\n                            <Contact_Method>\n                                <Contact_Other>\n                                    <Contact_Type>MOB</Contact_Type>\n                                    <Contact_Value>0423547987</Contact_Value>\n                                </Contact_Other>\n                            </Contact_Method>\n                            <Contact_Method>\n                                <Address>\n                                    <Address_Line_1>19 Queen Street</Address_Line_1>\n                                    <Address_Line_2></Address_Line_2>\n                                    <Suburb>Brisbane CBD</Suburb>\n                                    <State>QLD</State>\n                                    <Postcode>4000</Postcode>\n                                    <Is_Current>true</Is_Current>\n                                    <Residential_Type>false</Residential_Type>\n                                    <Residential_Status>1</Residential_Status>\n                                    <Time_At_Address_Months>25</Time_At_Address_Months>\n                                </Address>\n                            </Contact_Method>\n                        </Contact_Methods>\n                    </Person_Other>\n                </Employment_Contacts>\n                <Contact_Methods>\n                    <Contact_Method>\n                        <Contact_Other>\n                            <Contact_Type>Landline</Contact_Type>\n                            <Contact_Value>0726155948</Contact_Value>\n                        </Contact_Other>\n                    </Contact_Method>\n                    <Contact_Method>\n                        <Address>\n                            <Address_Line_1>5 Market Street</Address_Line_1>\n                            <Address_Line_2></Address_Line_2>\n                            <Suburb>Brisbane CBD</Suburb>\n                            <State>QLD</State>\n                            <Postcode>4000</Postcode>\n                            <Is_Current>true</Is_Current>\n                        </Address>\n                    </Contact_Method>\n                </Contact_Methods>\n            </Employment>\n        </Employment_History>\n        <Proof_Of_Identity>\n            <Identification>\n                <Type>Drivers License</Type>\n                <Document_ID>091153487</Document_ID>\n                <Issuer>QLD Government</Issuer>\n                <Date_Expiry>2019-07-22</Date_Expiry>\n                <Date_Issue>2015-07-21</Date_Issue>\n                <File_Name>ward-fredrick-driverslicense.png</File_Name>\n                <Is_Current>true</Is_Current>\n            </Identification>\n        </Proof_Of_Identity>\n    </Applicant>\n</Lead>\n"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "Settings": {
                    "type": "object",
                    "description": "A JSON-encoded object containing all the settings for your request.",
                    "required": [
                      "API_Token"
                    ],
                    "properties": {
                      "API_Token": {
                        "type": "string",
                        "description": "The unique token that identifies your API access privileges.",
                        "example": "daf90138-569f-4488-9f3b-099a58ac4130"
                      },
                      "Test_Sale_Outcome": {
                        "type": "integer",
                        "description": "The test sale outcome code you specify will determine the sale outcome to be returned. This is used for testing purposes only.",
                        "enum": [
                          1,
                          2,
                          3,
                          4
                        ]
                      },
                      "Client_ID": {
                        "type": "integer",
                        "description": "When provided, overrides the default Lead Market org unit attached to the API profile and creates the lead against the specified org unit.",
                        "example": 501
                      }
                    }
                  },
                  "Payload": {
                    "type": "string",
                    "example": "<?xml version=\"1.0\" encoding=\"utf-8\"?> <Lead>     <Seller_Data>         <Client_Authority>true</Client_Authority>         <Customer_Authority>true</Customer_Authority>         <Customer_Authority_Type>Explicit</Customer_Authority_Type>         <CS_App_ID>1577794</CS_App_ID>         <Use_MLM_Flow>true</Use_MLM_Flow>         <Lead_Reference>MyExampleRef0001</Lead_Reference>     </Seller_Data>     <Application>         <Application_Date>2016-08-10</Application_Date>         <Amount>200</Amount>         <Reason>Other – Test</Reason>     </Application>     <Applicant>         <Applicant_Type>Primary</Applicant_Type>         <Person_Applicant>             <Title>Mr</Title>             <Date_Of_Birth>1980-01-01</Date_Of_Birth>             <Last_Name>Ward</Last_Name>             <First_Name>Fredrick</First_Name>             <Marital_Status></Marital_Status>             <Contact_Methods>                 <Contact_Method>                     <Contact_Other>                         <Contact_Type>MOB</Contact_Type>                         <Contact_Value>0412341234</Contact_Value>                     </Contact_Other>                 </Contact_Method>             </Contact_Methods>         </Person_Applicant>     </Applicant> </Lead>",
                    "description": "Contains the details of the lead in XML format in accordance with our lead schema."
                  }
                },
                "required": [
                  "Settings",
                  "Payload"
                ]
              }
            }
          },
          "description": "### Testing sale outcomes\nPass a test sale outcome from the below table into `$.Settings.Test_Sale_Outcome` to simulate having a lead sell or fail to sell.\nProviding a test sale outcome is required if using API credentials linked to a test environment and an error will be returned if it is omitted.\nProviding a test sale outcome is not permitted if using API credentials linked to a production environment and an error will be returned if it is included.\nAny errors encountered processing your request will override your specified test sale outcome - i.e. you must provide valid data in order to test sale outcomes.\n\n| Code | Name         | Description                                                                                                                                                                                                                                                                  |\n|------|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| 1    | Make sale    | Results in the lead being sold and sold lead notifications will trigger. Use this outcome to how your system handles sold leads.                                                                                                                                             |\n| 2    | No Buyer     | Results in the lead being returned due to no buyer and unsold lead notifications will trigger. Use this outcome to how your system handles unsold leads.                                                                                                                     |\n| 3    | Already Sold | Results in the lead being returned due to the lead already existing on the market."
        },
        "parameters": []
      }
    },
    "/application/status": {
      "post": {
        "summary": "Get the status of a lead",
        "operationId": "post-application-status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Warnings": {
                      "type": "array",
                      "description": "A list of warnings. e.g. features that are soon to be deprecated or features that are not yet supported by the API.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "Success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead status was successfully returned.",
                      "default": "true"
                    },
                    "Data": {
                      "type": "object",
                      "description": "An object containing status information about the lead.",
                      "required": [
                        "Status_Type_Code",
                        "Status_Type_Description",
                        "Status_Code",
                        "Status_Description",
                        "Sale_Data"
                      ],
                      "properties": {
                        "Status_Type_Code": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                          ],
                          "description": "The code that identifies the status type."
                        },
                        "Status_Type_Description": {
                          "type": "string",
                          "enum": [
                            "Bought",
                            "On Market",
                            "Sold",
                            "Recalled",
                            "Preparing to Sell"
                          ],
                          "description": "Describes the status type."
                        },
                        "Status_Code": {
                          "type": "integer",
                          "enum": [
                            1,
                            2,
                            3,
                            4,
                            5,
                            10,
                            11,
                            12,
                            13,
                            14,
                            15,
                            16,
                            20,
                            21,
                            22
                          ],
                          "description": "The code that identifies the status."
                        },
                        "Status_Description": {
                          "type": "string",
                          "enum": [
                            "Bought",
                            "Bought - Cust Notified",
                            "Resell Pending",
                            "Pending CS App",
                            "Analysing Data",
                            "On Market",
                            "Waiting Sale",
                            "Sold",
                            "Sold - Cust Notified",
                            "Recalled",
                            "Recalled - Lead already on market",
                            "Recalled - No Buyer",
                            "Recalled - Lead already on market by same seller",
                            "Pending Client",
                            "Error - no active bid on client"
                          ],
                          "description": "Describes the status."
                        },
                        "Sale_Data": {
                          "type": "object",
                          "description": "An object containing sale data if the lead is sold or bought. If the lead isn't sold or bought, the value will be `null`.",
                          "properties": {
                            "LM_SaleDT": {
                              "type": "string",
                              "example": "2020-07-25 14:56:28.9966667",
                              "description": "The date-time of the sale."
                            },
                            "Lead_Price": {
                              "type": "number",
                              "example": 15,
                              "description": "The base sale amount for the lead. This is a duplicate of `$.Data.Sale_Data.Sale_Base_Amount` provided for backwards compatibility."
                            },
                            "Lead_ID": {
                              "type": "integer",
                              "example": 6605347,
                              "description": "Uniquely identifies the lead across Lead Market."
                            },
                            "CS_App_ID": {
                              "type": "integer",
                              "example": 1234567,
                              "description": "Our unique identifier for the Credit Sense application."
                            },
                            "Sale_Base_Amount": {
                              "type": "number",
                              "example": 15,
                              "description": "The base sale amount for the lead."
                            },
                            "Sale_Base_Amount_Tax": {
                              "type": "number",
                              "example": 1.5,
                              "description": "The tax amount for the base sale amount of the lead. This will be `0` if no tax is due for the sale."
                            },
                            "Sale_Trade_Comm_Amount": {
                              "type": "number",
                              "example": 3,
                              "description": "The trade commission amount for the lead."
                            },
                            "Sale_Trade_Comm_Amount_Tax": {
                              "type": "number",
                              "example": 0.3,
                              "description": "The tax amount for the trade comission on the lead. This will be `0` if no tax is due for the sale."
                            },
                            "Sale_Net_Amount": {
                              "type": "number",
                              "example": 22.25,
                              "description": "**Sellers:** The base sale amount less the trade comission.\n**Buyers:** The base sale amount plus the trade comission.\nAll amounts are tax-inclusive."
                            },
                            "Sale_Currency": {
                              "type": "string",
                              "enum": [
                                "AUD",
                                "CAD",
                                "GBP",
                                "NZD"
                              ],
                              "description": "Denotes the [currency](https://www.iban.com/currency-codes) that lead sale amounts are expressed in."
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "Warnings",
                    "Success",
                    "Data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Errors": {
                      "type": "array",
                      "description": "A list of errors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "default": "unauthorized",
                            "description": "Denotes the type of error encountered."
                          },
                          "error_code": {
                            "type": "string",
                            "default": "401.1",
                            "description": "The code that identifies the error."
                          },
                          "error_message": {
                            "type": "string",
                            "default": "Invalid API key.",
                            "description": "Describes the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Errors"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Errors": {
                      "type": "array",
                      "description": "A list of errors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "default": "not_found",
                            "description": "Denotes the type of error encountered."
                          },
                          "error_code": {
                            "type": "string",
                            "default": "404.1",
                            "description": "The code that identifies the error."
                          },
                          "error_message": {
                            "type": "string",
                            "default": "No endpoint exists for this URL.",
                            "description": "Describes the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Errors"
                  ]
                }
              }
            }
          }
        },
        "tags": [
          "Leads"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "API_Token": {
                    "type": "string",
                    "example": "daf90138-569f-4488-9f3b-099a58ac4130",
                    "description": "The unique token that identifies your API access privileges."
                  },
                  "Lead_ID": {
                    "type": "integer",
                    "example": 6605347,
                    "description": "Uniquely identifies the lead across Lead Market."
                  }
                },
                "required": [
                  "API_Token",
                  "Lead_ID"
                ]
              }
            }
          },
          "description": ""
        },
        "description": "### Overview\nGet the status of a specific lead.\n\nReasons to use this endpoint:\n- Understand whether a lead has sold.\n- Retrieve sale data for a sold lead.\n\n### Lead status\nThe status of the lead is broken down as below.\n\n| Status type code | Status type description | Status code | Status description                             |\n|------------------|-------------------------|-------------|------------------------------------------------|\n| 1                | Bought                  | 1           | Bought                                         |\n|                  |                         | 2           | Bought - Cust Notified                         |\n| 2                | On Market               | 10          | Resell Pending                                 |\n|                  |                         | 12          | Pending CS App                                 |\n|                  |                         | 13          | Analysing Data                                 |\n|                  |                         | 14          | On Market                                      |\n|                  |                         | 15          | Waiting Sale                                   |\n| 3                | Sold                    | 20          | Sold                                           |\n|                  |                         | 21          | Sold - Cust Notified                           |\n| 4                | Recalled                | 3           | Recalled                                       |\n|                  |                         | 4           | Recalled - Lead already on market              |\n|                  |                         | 5           | Recalled - No Buyer                            |\n|                  |                         | 22          | Recalled - Lead already on market bysameseller |\n| 5                | Preparing to Sell       | 11          | Pending Client                                 |\n|                  |                         | 16          | Error - no active bid on client                |\n\n### Non-compliant HTTP status codes\nWe have some non-compliant status codes that are returned in place of recognised HTTP status codes when specific errors occur.\n\n#### 701: Schema Validation Error\nSchema validation errors indicate that the data you've provided is invalid XML or it doesn't conform to our Seller schema.\n\n##### Example errors\n| Error message                                                                                                                        | Possible cause                                                                                                                           |\n|--------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| Fatal Error 4: Start tag expected, '<' not found                                                                                     | Missing '<' at beginning of document.                                                                                                    |\n| Error 1872: The document has no document element.                                                                                    | Missing root element. This may also show in various other situations, including if you do not escape xml reserved characters (like \"&\"). |\n| Error 1826: Element 'Application_Date': '2016-08-10b' is not a valid value of the union type 'L_Empty_Date'.                         | Date supplied is in incorrect format.                                                                                                    |\n| Error 1843: Element 'Application': Character content other than whitespace is not allowed because the content type is 'element-only' | Some text is not properly contained in an element.                                                                                       |\n| Fatal Error 76: Opening and ending tag mismatch: Lead line 1 and Seller_Data                                                         | A tag has not been correctly opened or closed.                                                                                           |\n\n#### 702: Authentication Error\nAuthentication errors errors indicate that you're not authorised to perform the requested actions.\n\n##### Example errors\n| Error message                                                                       | Possible cause                                                                                                        |\n|-------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|\n| Invalid API_Token                                                                   | The API_Token you passed in doesn't match the API_Key you used in the url.                                            |\n| Invalid CS_App_ID for API_Token                                                     | CS_App_ID doesn't exist or doesn't belong to you.                                                                     |\n| Invalid Lead_ID for API_Token                                                       | Lead_ID doesn't exist or doesn't belong to you.                                                                       |\n| Invalid Buyer_Token for API_Token                                                   | The Buyer_Token provided does not correspond to any leads you have purchased.                                         |\n| Invalid CS_App_ID for Client_ID                                                     | If you use the optional Client_ID parameter in settings. CS_App_ID doesn't exist or doesn't belong to this Client_ID. |\n| Client_ID not valid for API_Token                                                   | The Client_ID supplied doesn't exist or doesn't belong to you.                                                        |\n| Your API Key has not been activated yet, please contact us to activate your API key | The API profile your provided credentials link to is inactive. Contact us to activate it.                             |\n\n#### 703: Data Error\nData errors indicate that there's a mismatch between multiple bits of data you've provided.\n\n##### Example errors\n| Error message                                                                                                                              | Possible cause                                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Lead_ID and CS_App_ID don't match                                                                                                          | If you have provided both Lead_ID and CS_App_ID, these two numbers don't match on our database.                                                                                            |\n| The Credit Sense application was completed more then 24 hours ago. For a lead to be sold the application must be completed within 24 hours | The CS_App_ID you have provided references a Credit Sense application that was completed more than 24 hours ago. For a lead to be sold, the application must be completed within 24 hours. |\n| The fields 'Lead_ID' and 'Buyer_Token' were both missing, please include one in your API call                                              | You have not provided either Lead_ID or Buyer_Token; one must be provided.                                                                                                                 |\n| The fields 'Lead_ID' and 'Buyer_Token' were both present, please include only one in your API call                                         | You have provided both Lead_ID and Buyer_Token; only one may be provided.                                                                                                                  |\n| Settings object key: 'App_Reference' has not been provided                                                                                 | The App_Reference parameter is missing from the API call.                                                                                                                                  |\n\n#### 704: Other Error\nOther errors indicate that there's a generic problem, not described above.\n\n| Error message                                                                                                                                                                                  | Possible cause                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|\n| The API credentials you have provided are testing credentials and you haven't provided a valid Test_Sale_Outcome. When using test credentials you must include the Test_Sale_Outcome parameter | You're testing against a dev/test org unit and failed to pass in a valid test sale outcome. |",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          }
        ]
      }
    },
    "/application/detail": {
      "post": {
        "summary": "Get the details for a lead",
        "operationId": "post-application-detail",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Warnings": {
                      "type": "array",
                      "description": "A list of warnings. e.g. features that are soon to be deprecated or features that are not yet supported by the API.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "Success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully created.",
                      "default": "true"
                    },
                    "Data": {
                      "type": "object",
                      "description": "The lead details.",
                      "properties": {
                        "Lead": {
                          "$ref": "#/components/schemas/Lead-schema"
                        }
                      }
                    }
                  },
                  "required": [
                    "Warnings",
                    "Success",
                    "Data"
                  ]
                },
                "examples": {
                  "Buyer example": {
                    "value": {
                      "Applicant": {
                        "Applicant_Type": "Primary",
                        "References": {
                          "Reference": [
                            {
                              "Relationship_Type": "Previous employer",
                              "Known_Applicant_Years": "3",
                              "Person_Other": {
                                "Title": "Mr",
                                "Date_Of_Birth": "1975-07-17",
                                "Last_Name": "Rhoades",
                                "Middle_Names": "Chuck",
                                "First_Name": "Charles",
                                "Gender": "M",
                                "Contact_Methods": {
                                  "Contact_Method": [
                                    {
                                      "Contact_Other": {
                                        "Contact_Type": "mobile",
                                        "Contact_Value": "+61488853631",
                                        "V_Contact_Value": "+61488853631",
                                        "V_Contact_Type": "MOB"
                                      },
                                      "Address": {
                                        "Address_Line_1": "Aurora Tower",
                                        "Address_Line_2": "Level 69, 420 Queen Street",
                                        "Suburb": "Brisbane",
                                        "State": "QLD",
                                        "Postcode": "4000",
                                        "Is_Current": "true",
                                        "Residential_Type": "Apartment",
                                        "Residential_Status": "Renting",
                                        "Time_At_Address_Months": "36"
                                      }
                                    }
                                  ]
                                },
                                "V_Unique_Contact_Methods": {
                                  "V_Unique_Contact_Method": [
                                    {
                                      "V_Unique_Contact_Other": {
                                        "V_Unique_Contact_Value": "+61488853631",
                                        "V_Unique_Contact_Type": "MOB"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "Financials": {
                          "Financial": [
                            {
                              "Detailed_Income": {
                                "Source": "Axe Capital",
                                "Type": "Full-time",
                                "Frequency": "weekly",
                                "Description": "This is the customer's primary income",
                                "Net_Amount": 2000,
                                "Gross_Amount": 3000,
                                "Is_Current": "false",
                                "Start_Date": "2016-01-01",
                                "End_Date": "2020-08-26"
                              },
                              "Detailed_Liability": {
                                "Type": "once-off",
                                "Frequency": "monthly",
                                "Frequency_Amount": 100,
                                "Balance": 1000,
                                "Start_Date": "2019-08-24",
                                "Estimated_End_Date": "2019-08-24",
                                "Description": "Personal Loan"
                              },
                              "Summary_Income": {
                                "Net_Amount": "2000",
                                "Gross_Amount": "3000",
                                "Frequency": "weekly"
                              },
                              "Summary_Liability": {
                                "Amount": "100",
                                "Frequency": "monthly"
                              }
                            }
                          ]
                        },
                        "Bank_Accounts": {
                          "Bank_Account": [
                            {
                              "Account_Number": "17012016",
                              "Account_Name": "Super Saver",
                              "Bank_Name": "Mason Capital Savings and Loan",
                              "Account_Type": "Savings",
                              "BSB": "440003",
                              "Balance": "10000",
                              "Age_Of_Account": "4"
                            }
                          ]
                        },
                        "Person_Applicant": {
                          "Title": "Ms",
                          "Date_Of_Birth": "1978-02-11",
                          "Last_Name": "Rhoades",
                          "Middle_Names": "Chuck",
                          "First_Name": "Wendy",
                          "Gender": "F",
                          "Dependents": "2",
                          "Marital_Status": "Separated",
                          "Can_Provide_Guarantor": "true",
                          "Contact_Methods": {
                            "Contact_Method": [
                              {
                                "Contact_Other": {
                                  "Contact_Type": "mobile",
                                  "Contact_Value": "+61488853631",
                                  "V_Contact_Value": "+61488853631",
                                  "V_Contact_Type": "MOB"
                                },
                                "Address": {
                                  "Address_Line_1": "Aurora Tower",
                                  "Address_Line_2": "Level 69, 420 Queen Street",
                                  "Suburb": "Brisbane",
                                  "State": "QLD",
                                  "Postcode": "4000",
                                  "Is_Current": "false",
                                  "Residential_Type": "Apartment",
                                  "Residential_Status": "Renting",
                                  "Time_At_Address_Months": "36"
                                }
                              }
                            ]
                          },
                          "V_Unique_Contact_Methods": {
                            "V_Unique_Contact_Method": [
                              {
                                "V_Unique_Contact_Other": {
                                  "V_Unique_Contact_Value": "+61488853631",
                                  "V_Unique_Contact_Type": "MOB"
                                }
                              }
                            ]
                          }
                        },
                        "Employment_History": {
                          "Employment": [
                            {
                              "Is_Current": "true",
                              "Employment_Type": "Contract",
                              "Occupation": "Performance Coach",
                              "Working_Hours_Weekly": "40",
                              "Organisation_Name": "Axe Captial",
                              "Start_Date": "2015-02-14",
                              "End_Date": "2020-08-28",
                              "Employment_Contacts": {
                                "Person_Other": {
                                  "Title": "Mr",
                                  "Date_Of_Birth": "1977-04-12",
                                  "Last_Name": "Axelrod",
                                  "First_Name": "Bobby",
                                  "Gender": "M",
                                  "Contact_Methods": {
                                    "Contact_Method": [
                                      {
                                        "Contact_Other": {
                                          "Contact_Type": "mobile",
                                          "Contact_Value": "+61488853631",
                                          "V_Contact_Value": "+61488853631",
                                          "V_Contact_Type": "MOB"
                                        },
                                        "Address": {
                                          "Address_Line_1": "Casino Towers",
                                          "Address_Line_2": "Level 33, 151 George Street",
                                          "Suburb": "Brisbane",
                                          "State": "QLD",
                                          "Postcode": "4000",
                                          "Is_Current": "true",
                                          "Residential_Type": "Apartment",
                                          "Residential_Status": "Owned",
                                          "Time_At_Address_Months": "19"
                                        }
                                      }
                                    ]
                                  },
                                  "V_Unique_Contact_Methods": {
                                    "V_Unique_Contact_Method": [
                                      {
                                        "V_Unique_Contact_Other": {
                                          "V_Unique_Contact_Value": "+61488853631",
                                          "V_Unique_Contact_Type": "MOB"
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              "Contact_Methods": {
                                "Contact_Method": [
                                  {
                                    "Contact_Other": {
                                      "Contact_Type": "mobile",
                                      "Contact_Value": "+61488853631",
                                      "V_Contact_Value": "+61488853631",
                                      "V_Contact_Type": "MOB"
                                    },
                                    "Address": {
                                      "Address_Line_1": "Aurora Tower",
                                      "Address_Line_2": "Level 69, 420 Queen Street",
                                      "Suburb": "Brisbane",
                                      "State": "QLD",
                                      "Postcode": "4000",
                                      "Is_Current": "false"
                                    }
                                  }
                                ]
                              },
                              "V_Unique_Contact_Methods": {
                                "V_Unique_Contact_Method": [
                                  {
                                    "V_Unique_Contact_Other": {
                                      "V_Unique_Contact_Value": "+61488853631",
                                      "V_Unique_Contact_Type": "MOB"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "Proof_Of_Identity": {
                          "Identification": [
                            {
                              "Type": "driver licence",
                              "Document_ID": "084859805",
                              "Issuer": "Queensland Government",
                              "Date_Expiry": "2029-01-06",
                              "Date_Issue": "2019-01-06",
                              "File_Name": "rhoades-driver-licence.pdf",
                              "Is_Current": "true"
                            }
                          ]
                        }
                      },
                      "Application": {
                        "Application_Date": "2016-08-10",
                        "Interest_Rate": 20,
                        "Repayment_Amount": 200,
                        "Fees": 100,
                        "Type": "Personal Loan",
                        "Amount": 1000,
                        "Reason": "Book purchase",
                        "Repayment_Cycle": "weekly",
                        "Repayment_Count": "7",
                        "Description": "Purchase of first-edition 'The Second World War' six-volume series by Winston Churchill"
                      },
                      "Buyer_Data": {
                        "LM_SaleDT": "2017-01-06 17:22:48.4700000",
                        "Lead_Price": 50,
                        "CS_AppCompleted_DT": "2017-01-06 17:21:54.2600000",
                        "Lead_ID": 5824,
                        "CS_App_ID": 1577797,
                        "Winning_Bid_ID": 312,
                        "Sale_Base_Amount": 50,
                        "Sale_Base_Amount_Tax": 5,
                        "Sale_Trade_Comm_Amount": 7.5,
                        "Sale_Trade_Comm_Amount_Tax": 0.75,
                        "Sale_Net_Amount": 63.25,
                        "Sale_Currency": "AUD",
                        "Buyer_Token": "pC81HjJmiTKJ3stwVu7a"
                      },
                      "Custom_Data": {
                        "Your_Question_Here": "An example answer"
                      },
                      "Decision_Points": {
                        "Decision_Point": [
                          {
                            "ID": 101,
                            "Name": "customerAge",
                            "Score_DT": "1980-01-01 00:00:00.0000000",
                            "Score": 50
                          }
                        ]
                      }
                    }
                  },
                  "Seller example": {
                    "value": {
                      "Applicant": {
                        "Applicant_Type": "Primary",
                        "References": {
                          "Reference": [
                            {
                              "Relationship_Type": "Previous employer",
                              "Known_Applicant_Years": "3",
                              "Person_Other": {
                                "Title": "Mr",
                                "Date_Of_Birth": "1975-07-17",
                                "Last_Name": "Rhoades",
                                "Middle_Names": "Chuck",
                                "First_Name": "Charles",
                                "Gender": "M",
                                "Contact_Methods": {
                                  "Contact_Method": [
                                    {
                                      "Contact_Other": {
                                        "Contact_Type": "mobile",
                                        "Contact_Value": "+61488853631",
                                        "V_Contact_Value": "+61488853631",
                                        "V_Contact_Type": "MOB"
                                      },
                                      "Address": {
                                        "Address_Line_1": "Aurora Tower",
                                        "Address_Line_2": "Level 69, 420 Queen Street",
                                        "Suburb": "Brisbane",
                                        "State": "QLD",
                                        "Postcode": "4000",
                                        "Is_Current": "true",
                                        "Residential_Type": "Apartment",
                                        "Residential_Status": "Renting",
                                        "Time_At_Address_Months": "36"
                                      }
                                    }
                                  ]
                                },
                                "V_Unique_Contact_Methods": {
                                  "V_Unique_Contact_Method": [
                                    {
                                      "V_Unique_Contact_Other": {
                                        "V_Unique_Contact_Value": "+61488853631",
                                        "V_Unique_Contact_Type": "MOB"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "Financials": {
                          "Financial": [
                            {
                              "Detailed_Income": {
                                "Source": "Axe Capital",
                                "Type": "Full-time",
                                "Frequency": "weekly",
                                "Description": "This is the customer's primary income",
                                "Net_Amount": 2000,
                                "Gross_Amount": 3000,
                                "Is_Current": "false",
                                "Start_Date": "2016-01-01",
                                "End_Date": "2020-08-26"
                              },
                              "Detailed_Liability": {
                                "Type": "once-off",
                                "Frequency": "monthly",
                                "Frequency_Amount": 100,
                                "Balance": 1000,
                                "Start_Date": "2019-08-24",
                                "Estimated_End_Date": "2019-08-24",
                                "Description": "Personal Loan"
                              },
                              "Summary_Income": {
                                "Net_Amount": "2000",
                                "Gross_Amount": "3000",
                                "Frequency": "weekly"
                              },
                              "Summary_Liability": {
                                "Amount": "100",
                                "Frequency": "monthly"
                              }
                            }
                          ]
                        },
                        "Bank_Accounts": {
                          "Bank_Account": [
                            {
                              "Account_Number": "17012016",
                              "Account_Name": "Super Saver",
                              "Bank_Name": "Mason Capital Savings and Loan",
                              "Account_Type": "Savings",
                              "BSB": "440003",
                              "Balance": "10000",
                              "Age_Of_Account": "4"
                            }
                          ]
                        },
                        "Person_Applicant": {
                          "Title": "Ms",
                          "Date_Of_Birth": "1978-02-11",
                          "Last_Name": "Rhoades",
                          "Middle_Names": "Chuck",
                          "First_Name": "Wendy",
                          "Gender": "F",
                          "Dependents": "2",
                          "Marital_Status": "Separated",
                          "Can_Provide_Guarantor": "true",
                          "Contact_Methods": {
                            "Contact_Method": [
                              {
                                "Contact_Other": {
                                  "Contact_Type": "mobile",
                                  "Contact_Value": "+61488853631",
                                  "V_Contact_Value": "+61488853631",
                                  "V_Contact_Type": "MOB"
                                },
                                "Address": {
                                  "Address_Line_1": "Aurora Tower",
                                  "Address_Line_2": "Level 69, 420 Queen Street",
                                  "Suburb": "Brisbane",
                                  "State": "QLD",
                                  "Postcode": "4000",
                                  "Is_Current": "false",
                                  "Residential_Type": "Apartment",
                                  "Residential_Status": "Renting",
                                  "Time_At_Address_Months": "36"
                                }
                              }
                            ]
                          },
                          "V_Unique_Contact_Methods": {
                            "V_Unique_Contact_Method": [
                              {
                                "V_Unique_Contact_Other": {
                                  "V_Unique_Contact_Value": "+61488853631",
                                  "V_Unique_Contact_Type": "MOB"
                                }
                              }
                            ]
                          }
                        },
                        "Employment_History": {
                          "Employment": [
                            {
                              "Is_Current": "true",
                              "Employment_Type": "Contract",
                              "Occupation": "Performance Coach",
                              "Working_Hours_Weekly": "40",
                              "Organisation_Name": "Axe Captial",
                              "Start_Date": "2015-02-14",
                              "End_Date": "2020-08-28",
                              "Employment_Contacts": {
                                "Person_Other": {
                                  "Title": "Mr",
                                  "Date_Of_Birth": "1977-04-12",
                                  "Last_Name": "Axelrod",
                                  "First_Name": "Bobby",
                                  "Gender": "M",
                                  "Contact_Methods": {
                                    "Contact_Method": [
                                      {
                                        "Contact_Other": {
                                          "Contact_Type": "mobile",
                                          "Contact_Value": "+61488853631",
                                          "V_Contact_Value": "+61488853631",
                                          "V_Contact_Type": "MOB"
                                        },
                                        "Address": {
                                          "Address_Line_1": "Casino Towers",
                                          "Address_Line_2": "Level 33, 151 George Street",
                                          "Suburb": "Brisbane",
                                          "State": "QLD",
                                          "Postcode": "4000",
                                          "Is_Current": "true",
                                          "Residential_Type": "Apartment",
                                          "Residential_Status": "Owned",
                                          "Time_At_Address_Months": "19"
                                        }
                                      }
                                    ]
                                  },
                                  "V_Unique_Contact_Methods": {
                                    "V_Unique_Contact_Method": [
                                      {
                                        "V_Unique_Contact_Other": {
                                          "V_Unique_Contact_Value": "+61488853631",
                                          "V_Unique_Contact_Type": "MOB"
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              "Contact_Methods": {
                                "Contact_Method": [
                                  {
                                    "Contact_Other": {
                                      "Contact_Type": "mobile",
                                      "Contact_Value": "+61488853631",
                                      "V_Contact_Value": "+61488853631",
                                      "V_Contact_Type": "MOB"
                                    },
                                    "Address": {
                                      "Address_Line_1": "Aurora Tower",
                                      "Address_Line_2": "Level 69, 420 Queen Street",
                                      "Suburb": "Brisbane",
                                      "State": "QLD",
                                      "Postcode": "4000",
                                      "Is_Current": "false"
                                    }
                                  }
                                ]
                              },
                              "V_Unique_Contact_Methods": {
                                "V_Unique_Contact_Method": [
                                  {
                                    "V_Unique_Contact_Other": {
                                      "V_Unique_Contact_Value": "+61488853631",
                                      "V_Unique_Contact_Type": "MOB"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "Proof_Of_Identity": {
                          "Identification": [
                            {
                              "Type": "driver licence",
                              "Document_ID": "084859805",
                              "Issuer": "Queensland Government",
                              "Date_Expiry": "2029-01-06",
                              "Date_Issue": "2019-01-06",
                              "File_Name": "rhoades-driver-licence.pdf",
                              "Is_Current": "true"
                            }
                          ]
                        }
                      },
                      "Application": {
                        "Application_Date": "2016-08-10",
                        "Interest_Rate": 20,
                        "Repayment_Amount": 200,
                        "Fees": 100,
                        "Type": "Personal Loan",
                        "Amount": 1000,
                        "Reason": "Book purchase",
                        "Repayment_Cycle": "weekly",
                        "Repayment_Count": "7",
                        "Description": "Purchase of first-edition 'The Second World War' six-volume series by Winston Churchill"
                      },
                      "Seller_Data": {
                        "Client_Authority": true,
                        "Customer_Authority": true,
                        "Customer_Authority_Type": "Implicit",
                        "CS_App_ID": 18200557,
                        "Use_MLM_Flow": true,
                        "Lead_ID": 5824,
                        "Lead_Token": "F16WeC",
                        "Lead_Reference": "NYCAG2018",
                        "Credit_Authority_Enquiry_Number": 7671338561
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Errors": {
                      "type": "array",
                      "description": "A list of errors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "default": "unauthorized",
                            "description": "Denotes the type of error encountered."
                          },
                          "error_code": {
                            "type": "string",
                            "default": "401.1",
                            "description": "The code that identifies the error."
                          },
                          "error_message": {
                            "type": "string",
                            "default": "Invalid API key.",
                            "description": "Describes the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Errors"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "### Overview\nGet the details for a specific lead.\n\nReasons to use this endpoint:\n- Retrieve all details for a sold or bought lead.\n\nShared objects between Sellers and Buyers:\n- `$.Lead.Applicant`\n- `$.Lead.Application`\n\nSeller-only object:\n- `$.Lead.Seller_Data`\n\nBuyer-only objects:\n- `$.Lead.Buyer_Data`\n- `$.Lead.Custom_Data`\n- `$.Lead.Decision_Points`\n\n### Non-compliant HTTP status codes\nWe have some non-compliant status codes that are returned in place of recognised HTTP status codes when specific errors occur.\n\n#### 701: Schema Validation Error\nSchema validation errors indicate that the data you've provided is invalid XML or it doesn't conform to our Seller schema.\n\n##### Example errors\n| Error message                                                                                                                        | Possible cause                                                                                                                           |\n|--------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| Fatal Error 4: Start tag expected, '<' not found                                                                                     | Missing '<' at beginning of document.                                                                                                    |\n| Error 1872: The document has no document element.                                                                                    | Missing root element. This may also show in various other situations, including if you do not escape xml reserved characters (like \"&\"). |\n| Error 1826: Element 'Application_Date': '2016-08-10b' is not a valid value of the union type 'L_Empty_Date'.                         | Date supplied is in incorrect format.                                                                                                    |\n| Error 1843: Element 'Application': Character content other than whitespace is not allowed because the content type is 'element-only' | Some text is not properly contained in an element.                                                                                       |\n| Fatal Error 76: Opening and ending tag mismatch: Lead line 1 and Seller_Data                                                         | A tag has not been correctly opened or closed.                                                                                           |\n\n#### 702: Authentication Error\nAuthentication errors errors indicate that you're not authorised to perform the requested actions.\n\n##### Example errors\n| Error message                                                                       | Possible cause                                                                                                        |\n|-------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|\n| Invalid API_Token                                                                   | The API_Token you passed in doesn't match the API_Key you used in the url.                                            |\n| Invalid CS_App_ID for API_Token                                                     | CS_App_ID doesn't exist or doesn't belong to you.                                                                     |\n| Invalid Lead_ID for API_Token                                                       | Lead_ID doesn't exist or doesn't belong to you.                                                                       |\n| Invalid Buyer_Token for API_Token                                                   | The Buyer_Token provided does not correspond to any leads you have purchased.                                         |\n| Invalid CS_App_ID for Client_ID                                                     | If you use the optional Client_ID parameter in settings. CS_App_ID doesn't exist or doesn't belong to this Client_ID. |\n| Client_ID not valid for API_Token                                                   | The Client_ID supplied doesn't exist or doesn't belong to you.                                                        |\n| Your API Key has not been activated yet, please contact us to activate your API key | The API profile your provided credentials link to is inactive. Contact us to activate it.                             |\n\n#### 703: Data Error\nData errors indicate that there's a mismatch between multiple bits of data you've provided.\n\n##### Example errors\n| Error message                                                                                                                              | Possible cause                                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Lead_ID and CS_App_ID don't match                                                                                                          | If you have provided both Lead_ID and CS_App_ID, these two numbers don't match on our database.                                                                                            |\n| The Credit Sense application was completed more then 24 hours ago. For a lead to be sold the application must be completed within 24 hours | The CS_App_ID you have provided references a Credit Sense application that was completed more than 24 hours ago. For a lead to be sold, the application must be completed within 24 hours. |\n| The fields 'Lead_ID' and 'Buyer_Token' were both missing, please include one in your API call                                              | You have not provided either Lead_ID or Buyer_Token; one must be provided.                                                                                                                 |\n| The fields 'Lead_ID' and 'Buyer_Token' were both present, please include only one in your API call                                         | You have provided both Lead_ID and Buyer_Token; only one may be provided.                                                                                                                  |\n| Settings object key: 'App_Reference' has not been provided                                                                                 | The App_Reference parameter is missing from the API call.                                                                                                                                  |\n\n#### 704: Other Error\nOther errors indicate that there's a generic problem, not described above.\n\n| Error message                                                                                                                                                                                  | Possible cause                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|\n| The API credentials you have provided are testing credentials and you haven't provided a valid Test_Sale_Outcome. When using test credentials you must include the Test_Sale_Outcome parameter | You're testing against a dev/test org unit and failed to pass in a valid test sale outcome. |",
        "tags": [
          "Leads"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "API_Token": {
                    "type": "string",
                    "example": "daf90138-569f-4488-9f3b-099a58ac4130",
                    "description": "The unique token that identifies your API access privileges."
                  },
                  "Lead_ID": {
                    "type": "integer",
                    "example": 6605347,
                    "description": "Uniquely identifies the lead across Lead Market. If this is omitted, `$.Buyer_Token` must be present."
                  },
                  "Buyer_Token": {
                    "type": "string",
                    "description": "Uniquely identifies the lead across Lead Market for the Buyer. If this is omitted, `$.Lead_ID` must be present.",
                    "example": "UBSgSRGCLvfasymMDERYHNdtjSjBD72S"
                  },
                  "Extra_Info_Only": {
                    "type": "boolean",
                    "default": "false",
                    "description": "Specify whether you'd like to only receive lead details added via the Lead Market buyer form. When set to `true`, only the information we gather from the lead in the Buyer iframe will be returned in the response."
                  }
                },
                "required": [
                  "API_Token"
                ]
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          }
        ]
      }
    },
    "/webhook-seller": {
      "post": {
        "summary": "Seller webhooks",
        "operationId": "post-seller-webhook-sold",
        "responses": {},
        "callbacks": {
          "Seller sold webhook": {
            "https://your-webhook-endpoint.com": {
              "post": {
                "summary": "Lead Market sold lead webhook",
                "description": "A callback is triggered every time a lead is sold.",
                "externalDocs": {
                  "description": "Check out our help docs.",
                  "url": "https://docs.creditsense.com.au/display/CSI/Fully+integrated+webhook"
                },
                "requestBody": {
                  "content": {
                    "application/x-www-form-urlencoded": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "Status": {
                            "type": "object",
                            "description": "An object containing status information about the lead.",
                            "required": [
                              "Status_Type_Code",
                              "Status_Type_Description",
                              "Status_Code",
                              "Status_Description",
                              "Sale_Data"
                            ],
                            "properties": {
                              "Status_Type_Code": {
                                "type": "integer",
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5
                                ],
                                "description": "The code that identifies the status type."
                              },
                              "Status_Type_Description": {
                                "type": "string",
                                "enum": [
                                  "Bought",
                                  "On Market",
                                  "Sold",
                                  "Recalled",
                                  "Preparing to Sell"
                                ],
                                "description": "Describes the status type."
                              },
                              "Status_Code": {
                                "type": "integer",
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  10,
                                  11,
                                  12,
                                  13,
                                  14,
                                  15,
                                  16,
                                  20,
                                  21,
                                  22
                                ],
                                "description": "The code that identifies the status."
                              },
                              "Status_Description": {
                                "type": "string",
                                "enum": [
                                  "Bought",
                                  "Bought - Cust Notified",
                                  "Resell Pending",
                                  "Pending CS App",
                                  "Analysing Data",
                                  "On Market",
                                  "Waiting Sale",
                                  "Sold",
                                  "Sold - Cust Notified",
                                  "Recalled",
                                  "Recalled - Lead already on market",
                                  "Recalled - No Buyer",
                                  "Recalled - Lead already on market by same seller",
                                  "Pending Client",
                                  "Error - no active bid on client"
                                ],
                                "description": "Describes the status."
                              }
                            }
                          },
                          "LM_SaleDT": {
                            "type": "string",
                            "example": "2020-07-25 14:56:28.9966667",
                            "description": "The date-time of the sale."
                          },
                          "Lead_Price": {
                            "type": "number",
                            "example": 15,
                            "description": "The base sale amount for the lead. This is a duplicate of `$.Data.Sale_Data.Sale_Base_Amount` provided for backwards compatibility."
                          },
                          "Lead_ID": {
                            "type": "integer",
                            "example": 6605347,
                            "description": "Uniquely identifies the lead across Lead Market."
                          },
                          "CS_App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the Credit Sense application."
                          },
                          "Sale_Base_Amount": {
                            "type": "number",
                            "example": 15,
                            "description": "The base sale amount for the lead."
                          },
                          "Sale_Base_Amount_Tax": {
                            "type": "number",
                            "example": 1.5,
                            "description": "The tax amount for the base sale amount of the lead. This will be `0` if no tax is due for the sale."
                          },
                          "Sale_Trade_Comm_Amount": {
                            "type": "number",
                            "example": 3,
                            "description": "The trade commission amount for the lead."
                          },
                          "Sale_Trade_Comm_Amount_Tax": {
                            "type": "number",
                            "example": 0.3,
                            "description": "The tax amount for the trade comission on the lead. This will be `0` if no tax is due for the sale."
                          },
                          "Sale_Net_Amount": {
                            "type": "number",
                            "example": 22.25,
                            "description": "**Sellers:** The base sale amount less the trade comission.\n**Buyers:** The base sale amount plus the trade comission.\nAll amounts are tax-inclusive."
                          },
                          "Sale_Currency": {
                            "type": "string",
                            "enum": [
                              "AUD",
                              "CAD",
                              "GBP",
                              "NZD"
                            ],
                            "description": "Denotes the [currency](https://www.iban.com/currency-codes) that lead sale amounts are expressed in."
                          }
                        },
                        "required": [
                          "Status",
                          "LM_SaleDT",
                          "Lead_Price",
                          "Lead_ID",
                          "CS_App_ID",
                          "Sale_Base_Amount",
                          "Sale_Base_Amount_Tax",
                          "Sale_Trade_Comm_Amount",
                          "Sale_Trade_Comm_Amount_Tax",
                          "Sale_Net_Amount",
                          "Sale_Currency"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          },
          "Seller unsold webhook": {
            "https://your-webhook-endpoint.com": {
              "post": {
                "summary": "Lead Market unsold lead webhook",
                "description": "A callback is triggered every time a lead fails to sell.",
                "externalDocs": {
                  "description": "Check out our help docs.",
                  "url": "https://docs.creditsense.com.au/display/CSI/Fully+integrated+webhook"
                },
                "requestBody": {
                  "content": {
                    "application/x-www-form-urlencoded": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "Status": {
                            "type": "object",
                            "description": "An object containing status information about the lead.",
                            "required": [
                              "Status_Type_Code",
                              "Status_Type_Description",
                              "Status_Code",
                              "Status_Description",
                              "Sale_Data"
                            ],
                            "properties": {
                              "Status_Type_Code": {
                                "type": "integer",
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5
                                ],
                                "description": "The code that identifies the status type."
                              },
                              "Status_Type_Description": {
                                "type": "string",
                                "enum": [
                                  "Bought",
                                  "On Market",
                                  "Sold",
                                  "Recalled",
                                  "Preparing to Sell"
                                ],
                                "description": "Describes the status type."
                              },
                              "Status_Code": {
                                "type": "integer",
                                "enum": [
                                  1,
                                  2,
                                  3,
                                  4,
                                  5,
                                  10,
                                  11,
                                  12,
                                  13,
                                  14,
                                  15,
                                  16,
                                  20,
                                  21,
                                  22
                                ],
                                "description": "The code that identifies the status."
                              },
                              "Status_Description": {
                                "type": "string",
                                "enum": [
                                  "Bought",
                                  "Bought - Cust Notified",
                                  "Resell Pending",
                                  "Pending CS App",
                                  "Analysing Data",
                                  "On Market",
                                  "Waiting Sale",
                                  "Sold",
                                  "Sold - Cust Notified",
                                  "Recalled",
                                  "Recalled - Lead already on market",
                                  "Recalled - No Buyer",
                                  "Recalled - Lead already on market by same seller",
                                  "Pending Client",
                                  "Error - no active bid on client"
                                ],
                                "description": "Describes the status."
                              }
                            }
                          },
                          "Lead_ID": {
                            "type": "integer",
                            "example": 6605347,
                            "description": "Uniquely identifies the lead across Lead Market."
                          },
                          "CS_App_ID": {
                            "type": "integer",
                            "example": 1234567,
                            "description": "Our unique identifier for the Credit Sense application."
                          }
                        },
                        "required": [
                          "Status",
                          "Lead_ID",
                          "CS_App_ID"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          }
        },
        "description": "### Overview\nSubscribe to webhook notifications to know when you've sold a lead.\n\n### Configuring your endpoint\nYou'll need to create a webhook endpoint in your system and make it publicly available. Once it's ready, you can add it on the [Notification Profiles page](https://admin.leadmarketonline.com/NotificationProfiles) in the Lead Market dashboard, or [let us know](mailto:support@creditsense.com.au) and we can update it for you.\n\n### Retry logic\nWhen we post the payload to your callback URL, we expect a `200` response indicating the webhook has been received successfully. If we do not receive a `200` response, we will retry your callback URL for a couple of minutes.\n\nThe delay between attempts is increased exponentially following every failed attempt until three retries are exhausted.\n\n| Retry | Delay                       | Total time since first delivery attempt |\n|-------|-----------------------------|-----------------------------------------|\n| 1     | 3 seconds                   | 3 seconds                               |\n| 2     | 15 seconds                  | 18 seconds                              |\n| 3     | 75 seconds                  | 93 seconds                              |",
        "servers": [
          {
            "url": "https://your-webhook-endpoint.com",
            "description": "Your webhook endpoint"
          }
        ],
        "tags": [
          "Seller"
        ]
      },
      "parameters": []
    },
    "/set-application-details/{api-key}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "api-key",
          "in": "path",
          "required": true,
          "description": "The unique key that identifies your account.",
          "default": "your-api-key-goes-here"
        }
      ],
      "post": {
        "summary": "Add an engaged lead",
        "operationId": "post-set-application-details",
        "deprecated": true,
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "default": 200
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully changed to the requested status.",
                      "default": "true"
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "default": 400
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully changed to the requested status.",
                      "default": "false"
                    },
                    "data": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error_code": {
                          "type": "integer",
                          "example": 2,
                          "description": "The code for this error."
                        },
                        "error_message": {
                          "type": "string",
                          "description": "The details of the error, which should indicate what to do to resolve the error.",
                          "example": "The following parameters were not recognised: tester"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "data"
                  ]
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "default": 200
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully changed to the requested status.",
                      "default": "true"
                    },
                    "data": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error_code": {
                          "type": "integer",
                          "example": 1,
                          "description": "The code for this error."
                        },
                        "error_message": {
                          "type": "string",
                          "description": "The details of the error, which should indicate what to do to resolve the error.",
                          "example": "An error was encountered when contacting the database. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          }
        ],
        "description": "**This endpoint is deprecated. Use `/application/single` instead.**\n\n### Overview\nAdd a lead to Lead Market.\n\nReasons to use this endpoint:\n- Create a disengaged lead and push it into the market for sale.\n- Pass in lead details for an engaged lead that will be retrieved when the lead is pushed into the market.\n\n### Error codes\n\n| Error code | Type                 | Description                                                         |\n|------------|----------------------|---------------------------------------------------------------------|\n| 2          | Input Error          | Either required fields were missing or invalid fields were provided |\n| 3          | Data Error           | There was an error caused by the value provided for a field         |\n| 4          | Authentication Error | The provided Lead Market API Key and Token are incorrect            |",
        "servers": [
          {
            "url": "https://managed.leadmarketonline.com",
            "description": "Managed Lead Market API"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api-token": {
                    "type": "string",
                    "description": "Identifies your access to the API.",
                    "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
                  },
                  "ref": {
                    "type": "string",
                    "example": "abc123"
                  },
                  "csid": {
                    "type": "integer",
                    "example": 18085549
                  },
                  "fn": {
                    "type": "string",
                    "example": "Lonnie"
                  },
                  "sn": {
                    "type": "string",
                    "example": "Watley"
                  },
                  "dob": {
                    "type": "string",
                    "description": "The lead's date of birth in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                    "example": "1977-09-26"
                  },
                  "mob": {
                    "type": "string",
                    "example": "+61488853631"
                  },
                  "e": {
                    "type": "string",
                    "example": "support@leadexchange.ca"
                  },
                  "l": {
                    "type": "string",
                    "example": "+61731185233"
                  },
                  "a": {
                    "type": "string",
                    "example": "7/201 Charlotte Street, Brisbane QLD 4000"
                  },
                  "emp": {
                    "type": "string",
                    "example": "Dewey, Cheatem and Howe lawyers"
                  },
                  "la": {
                    "type": "number",
                    "example": 2500
                  },
                  "lr": {
                    "type": "string",
                    "example": "Home repairs"
                  },
                  "caen": {
                    "type": "integer",
                    "example": 549689725
                  },
                  "tok": {
                    "type": "string",
                    "example": "w3IxLC"
                  },
                  "public": {
                    "type": "boolean",
                    "default": "false"
                  },
                  "return-lead-id": {
                    "type": "boolean",
                    "default": "false"
                  }
                },
                "required": [
                  "api-token",
                  "ref"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Seller"
        ]
      }
    },
    "/webhook-buyer": {
      "post": {
        "summary": "Buyer webhook",
        "operationId": "post-buyer-webhook",
        "responses": {},
        "callbacks": {
          "Buyer notify webhook": {
            "https://your-webhook-endpoint.com": {
              "post": {
                "summary": "Lead Market bought lead webhook",
                "description": "A callback is triggered every time a lead is purchased.",
                "externalDocs": {
                  "description": "Check out our help docs.",
                  "url": "https://docs.creditsense.com.au/display/LMA/Webhook+Implementation"
                },
                "requestBody": {
                  "content": {
                    "application/x-www-form-urlencoded": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "Lead": {
                            "type": "object",
                            "properties": {
                              "Applicant": {
                                "$ref": "#/components/schemas/Applicant-schema"
                              },
                              "Application": {
                                "$ref": "#/components/schemas/Application-schema"
                              },
                              "Buyer_Data": {
                                "$ref": "#/components/schemas/Buyer_Data-schema"
                              },
                              "Custom_Data": {
                                "$ref": "#/components/schemas/Custom_Data-schema"
                              },
                              "Decision_Points": {
                                "$ref": "#/components/schemas/Decision_Points-schema"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "OK"
                  }
                }
              }
            }
          }
        },
        "description": "### Overview\nSubscribe to webhook notifications to know when you've bought a lead.\n\n### Seller data validation\nWe take what may be thought of as a _laissez faire_ approach to validation on lead data passed in by Sellers. This is not done to intentionally make Buyer integrations difficult. Rather, when a Seller is passing in details via the API it’s generally due to the lead not being engaged at the time. The stance we take on this is _it’s better to have some data that **may** be invalid, than no data_. A good example is when a lead provides a valid mobile number, but they enter it in the email address field of a Seller’s website. If the Seller's form doesn't validate the data and passes it through to Lead Market, we'll accept it. We’ll provide the raw values to the Buyer, and we’ll also provided validated contact details in the `$..V_Contact_Type` and `$..V_Contact_Value` fields. We've found this approach provides the best outcome and richer lead data sets for Buyers.\n\n### Configuring your endpoint\nYou'll need to create a webhook endpoint in your system and make it publicly available. Once it's ready, you can add it on the [Notification Profiles page](https://admin.leadmarketonline.com/NotificationProfiles) in the Lead Market dashboard, or [let us know](mailto:support@creditsense.com.au) and we can update it for you.\n\n### Retry logic\nWhen we post the payload to your callback URL, we expect a `200` response indicating the webhook has been received successfully. If we do not receive a `200` response, we will retry your callback URL for a couple of minutes.\n\nThe delay between attempts is increased exponentially following every failed attempt until three retries are exhausted.\n\n| Retry | Delay                       | Total time since first delivery attempt |\n|-------|-----------------------------|-----------------------------------------|\n| 1     | 3 seconds                   | 3 seconds                               |\n| 2     | 15 seconds                  | 18 seconds                              |\n| 3     | 75 seconds                  | 93 seconds                              |",
        "servers": [
          {
            "url": "https://your-webhook-endpoint.com",
            "description": "Your webhook endpoint"
          }
        ],
        "tags": [
          "Buyer"
        ]
      }
    },
    "/application/updatecs": {
      "post": {
        "summary": "Update the Credit Sense reference for a lead",
        "operationId": "post-application-updatecs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Warnings": {
                      "type": "array",
                      "description": "A list of warnings. e.g. features that are soon to be deprecated or features that are not yet supported by the API.",
                      "items": {
                        "type": "string"
                      }
                    },
                    "Success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully created.",
                      "default": "true"
                    },
                    "Data": {
                      "type": "string",
                      "description": "A description of the successfult actions.",
                      "example": "Application reference updated successfully, Credit Sense report successfully requested."
                    }
                  },
                  "required": [
                    "Warnings",
                    "Success",
                    "Data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "Errors": {
                      "type": "array",
                      "description": "A list of errors.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "default": "unauthorized",
                            "description": "Denotes the type of error encountered."
                          },
                          "error_code": {
                            "type": "string",
                            "default": "401.1",
                            "description": "The code that identifies the error."
                          },
                          "error_message": {
                            "type": "string",
                            "default": "Invalid API key.",
                            "description": "Describes the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  },
                  "required": [
                    "Errors"
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "### Overview\nUpdate your reference for a Credit Sense report attached to a lead you bought.\n\nReasons to use this endpoint:\n- Add your unique identifier for a lead to the associated Credit Sense report.\n- Request delivery of the Credit Sense report for a purchased lead.\n\n### Non-compliant HTTP status codes\nWe have some non-compliant status codes that are returned in place of recognised HTTP status codes when specific errors occur.\n\n#### 701: Schema Validation Error\nSchema validation errors indicate that the data you've provided is invalid XML or it doesn't conform to our Seller schema.\n\n##### Example errors\n| Error message                                                                                                                        | Possible cause                                                                                                                           |\n|--------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------|\n| Fatal Error 4: Start tag expected, '<' not found                                                                                     | Missing '<' at beginning of document.                                                                                                    |\n| Error 1872: The document has no document element.                                                                                    | Missing root element. This may also show in various other situations, including if you do not escape xml reserved characters (like \"&\"). |\n| Error 1826: Element 'Application_Date': '2016-08-10b' is not a valid value of the union type 'L_Empty_Date'.                         | Date supplied is in incorrect format.                                                                                                    |\n| Error 1843: Element 'Application': Character content other than whitespace is not allowed because the content type is 'element-only' | Some text is not properly contained in an element.                                                                                       |\n| Fatal Error 76: Opening and ending tag mismatch: Lead line 1 and Seller_Data                                                         | A tag has not been correctly opened or closed.                                                                                           |\n\n#### 702: Authentication Error\nAuthentication errors errors indicate that you're not authorised to perform the requested actions.\n\n##### Example errors\n| Error message                                                                       | Possible cause                                                                                                        |\n|-------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------|\n| Invalid API_Token                                                                   | The API_Token you passed in doesn't match the API_Key you used in the url.                                            |\n| Invalid CS_App_ID for API_Token                                                     | CS_App_ID doesn't exist or doesn't belong to you.                                                                     |\n| Invalid Lead_ID for API_Token                                                       | Lead_ID doesn't exist or doesn't belong to you.                                                                       |\n| Invalid Buyer_Token for API_Token                                                   | The Buyer_Token provided does not correspond to any leads you have purchased.                                         |\n| Invalid CS_App_ID for Client_ID                                                     | If you use the optional Client_ID parameter in settings. CS_App_ID doesn't exist or doesn't belong to this Client_ID. |\n| Client_ID not valid for API_Token                                                   | The Client_ID supplied doesn't exist or doesn't belong to you.                                                        |\n| Your API Key has not been activated yet, please contact us to activate your API key | The API profile your provided credentials link to is inactive. Contact us to activate it.                             |\n\n#### 703: Data Error\nData errors indicate that there's a mismatch between multiple bits of data you've provided.\n\n##### Example errors\n| Error message                                                                                                                              | Possible cause                                                                                                                                                                             |\n|--------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| Lead_ID and CS_App_ID don't match                                                                                                          | If you have provided both Lead_ID and CS_App_ID, these two numbers don't match on our database.                                                                                            |\n| The Credit Sense application was completed more then 24 hours ago. For a lead to be sold the application must be completed within 24 hours | The CS_App_ID you have provided references a Credit Sense application that was completed more than 24 hours ago. For a lead to be sold, the application must be completed within 24 hours. |\n| The fields 'Lead_ID' and 'Buyer_Token' were both missing, please include one in your API call                                              | You have not provided either Lead_ID or Buyer_Token; one must be provided.                                                                                                                 |\n| The fields 'Lead_ID' and 'Buyer_Token' were both present, please include only one in your API call                                         | You have provided both Lead_ID and Buyer_Token; only one may be provided.                                                                                                                  |\n| Settings object key: 'App_Reference' has not been provided                                                                                 | The App_Reference parameter is missing from the API call.                                                                                                                                  |\n\n#### 704: Other Error\nOther errors indicate that there's a generic problem, not described above.\n\n| Error message                                                                                                                                                                                  | Possible cause                                                                              |\n|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|\n| The API credentials you have provided are testing credentials and you haven't provided a valid Test_Sale_Outcome. When using test credentials you must include the Test_Sale_Outcome parameter | You're testing against a dev/test org unit and failed to pass in a valid test sale outcome. |",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "API_Token": {
                    "type": "string",
                    "example": "daf90138-569f-4488-9f3b-099a58ac4130",
                    "description": "The unique token that identifies your API access privileges."
                  },
                  "Lead_ID": {
                    "type": "integer",
                    "example": 6605347,
                    "description": "Uniquely identifies the lead across Lead Market. This ID can be used as an alternative to `Buyer_Token`."
                  },
                  "Buyer_Token": {
                    "type": "string",
                    "example": "mmhLg4DxbtA5cL4nMrUv",
                    "description": "A string that uniquely identifies this Lead for the Buyer. This token can be used as an alternative to `Lead_ID`."
                  },
                  "App_Reference": {
                    "type": "string",
                    "example": "Spiro_18557",
                    "description": "Your unique reference that we'll add to the Credit Sense report associated with the lead you bought."
                  },
                  "Deliver_CS_Report": {
                    "type": "integer",
                    "enum": [
                      0,
                      1
                    ],
                    "description": "Denotes whether you want the Credit Sense report associated with this lead delivered to you. When set to true, the CS report will be delivered based on the CS environment configuration rules (e.g. deliver via email and/or webhook)."
                  }
                },
                "required": [
                  "API_Token"
                ]
              }
            }
          },
          "description": ""
        },
        "tags": [
          "Buyer"
        ]
      }
    },
    "/set-bought-lead/{api-key}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "api-key",
          "in": "path",
          "required": true,
          "description": "The unique key that identifies your account.",
          "default": "your-api-key-goes-here"
        }
      ],
      "post": {
        "summary": "Update the status of a lead",
        "operationId": "post-set-bought-lead",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "default": 200
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully changed to the requested status.",
                      "default": "true"
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "default": 400
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully changed to the requested status.",
                      "default": "false"
                    },
                    "data": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error_code": {
                          "type": "integer",
                          "example": 2,
                          "description": "The code for this error."
                        },
                        "error_message": {
                          "type": "string",
                          "description": "The details of the error, which should indicate what to do to resolve the error.",
                          "example": "The following parameters were not recognised: tester"
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "data"
                  ]
                },
                "examples": {}
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "The HTTP status code.",
                      "default": 200
                    },
                    "success": {
                      "type": "boolean",
                      "description": "Denotes whether the lead was successfully changed to the requested status.",
                      "default": "true"
                    },
                    "data": {
                      "type": "object",
                      "description": "",
                      "properties": {
                        "error_code": {
                          "type": "integer",
                          "example": 1,
                          "description": "The code for this error."
                        },
                        "error_message": {
                          "type": "string",
                          "description": "The details of the error, which should indicate what to do to resolve the error.",
                          "example": "An error was encountered when contacting the database. Please try again later."
                        }
                      }
                    }
                  },
                  "required": [
                    "status",
                    "success",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          }
        ],
        "description": "### Overview\nProvide status updates for leads you've bought.\n\nReasons to use this endpoint:\n- Tell us when a lead has completed your application and whether they were funded or declined to benefit from rich reporting in the [Lead Market dashboard](https://admin.leadmarketonline.com/Reports).\n\n### Error codes\n\n| Error code | Type                 | Description                                                         |\n|------------|----------------------|---------------------------------------------------------------------|\n| 2          | Input Error          | Either required fields were missing or invalid fields were provided |\n| 3          | Data Error           | There was an error caused by the value provided for a field         |\n| 4          | Authentication Error | The provided Lead Market API Key and Token are incorrect            |",
        "tags": [
          "Buyer"
        ],
        "servers": [
          {
            "url": "https://managed.leadmarketonline.com",
            "description": "Managed Lead Market API"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "api-token": {
                    "type": "string",
                    "description": "Identifies your access to the API.",
                    "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
                  },
                  "token": {
                    "type": "string",
                    "description": "A string that uniquely identifies this Lead for the Buyer. This token can be used as an alternative to `lead-id`.",
                    "example": "pC81HjJmiTKJ3stwVu7a"
                  },
                  "lead-id": {
                    "type": "integer",
                    "description": "Uniquely identifies the lead across Lead Market. This ID can be used as an alternative to `token`.",
                    "example": 6605347
                  },
                  "status-id": {
                    "type": "integer",
                    "enum": [
                      7,
                      8,
                      9,
                      10
                    ],
                    "description": "Denotes the status to change the lead to."
                  }
                },
                "required": [
                  "api-token",
                  "status-id"
                ]
              }
            }
          },
          "description": "### Lead status\nThe lead status can be set as below.\n\n| ID | Status                |\n|----|-----------------------|\n| 7  | Application Started   |\n| 8  | Application Completed |\n| 9  | Application Approved  |\n| 10 | Application Declined  |"
        }
      }
    },
    "/smart_campaigns/{id}/outcome_imports": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": ""
        }
      ],
      "post": {
        "summary": "Import outcomes for bought leads",
        "operationId": "post-smart_campaigns-id-outcome_imports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records received.",
                      "default": 200
                    },
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "default": "true",
                      "items": {
                        "type": "null"
                      }
                    },
                    "data": {
                      "type": "object",
                      "description": "",
                      "required": [
                        "outcome_import_id"
                      ],
                      "properties": {
                        "outcome_import_id": {
                          "type": "integer",
                          "example": 2,
                          "description": "Uniquely identifies this import of lead outcomes."
                        }
                      }
                    }
                  },
                  "required": [
                    "total_records",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records received.",
                      "example": 52
                    },
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Request could not be json decoded.",
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "outcome_import_id": {
                          "type": "integer",
                          "example": 36,
                          "description": "Uniquely identifies this import of lead outcomes. Although an import was created, it will be in an error status and no outcomes will be used in your Smart Campaign."
                        }
                      },
                      "required": [
                        "outcome_import_id"
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          }
        ],
        "description": "### Overview\nProvide application outcomes for leads you've bought.\n\nReasons to use this endpoint:\n- Feed funding outcomes into Smart Campaigns to further train and refine your Smart Campaigns algorithm.\n- Provide application outcomes in order to track conversion rates and cost-per-contract metrics via the Lead Market dashboard.\n\n### Smart Campaigns ID\nThe `{id}` in the request URL is the ID of your Smart Campaign. You can retrieve this by navigating to your Smart Campaign on the [Lead Market dashboard](https://admin.leadmarketonline.com/SmartCampaigns) and checking the page URL. e.g. `https://admin.leadmarketonline.com/SmartCampaigns/view/1234`.\n\n### Viewing outcomes\nAfter receiving a successful response to this call you can view the status of each import on the Smart Campaigns page on the [Lead Market dashboard](https://admin.leadmarketonline.com/SmartCampaigns).",
        "tags": [
          "Buyer"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "reference": {
                      "type": "string",
                      "description": "Your unique reference you provided to us after purchasing the lead.",
                      "example": "Spiro_18557"
                    },
                    "leadId": {
                      "type": "integer",
                      "example": 6605347,
                      "description": "Uniquely identifies the lead across Lead Market."
                    },
                    "csAppId": {
                      "type": "integer",
                      "description": "Uniquely identifies the lead in Credit Sense.",
                      "example": 18520023
                    },
                    "email": {
                      "type": "string",
                      "description": "The lead's email address.",
                      "example": "support@creditsense.com.au"
                    },
                    "createDt": {
                      "type": "string",
                      "example": "2020-01-16 13:26:09.2400000",
                      "description": "The date and time when the lead was added into your system in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
                    },
                    "outcome": {
                      "type": "string",
                      "example": "Declined",
                      "description": "The outcome for the lead according to your system. This can be any outcome you assign to leads in your system (e.g. `Funded`, `Declined`, `Rejected - incomplete application`, `Abandoned`, etc.) Once you've imported the lead outcomes you'll be able to map any unknown lead outcomes to our templates via the [Lead Market dashboard](https://admin.leadmarketonline.com/SmartCampaigns)"
                    },
                    "lostReason": {
                      "type": "string",
                      "example": "Failed consultation",
                      "description": "The reason the lead is not being funded."
                    }
                  },
                  "required": [
                    "outcome"
                  ]
                }
              }
            }
          },
          "description": "You must provide **at least one** of these pieces of information in order for us to identify each lead:\n- `reference`\n- `leadId`\n- `csAppid`\n- `email` and `createDt`"
        }
      }
    },
    "/lists": {
      "get": {
        "summary": "Retrieve lists",
        "operationId": "get-lists",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "null",
                      "description": ""
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "list_id": {
                            "type": "integer",
                            "example": 13,
                            "description": "Our unique ID for the list."
                          },
                          "list_name": {
                            "type": "string",
                            "example": "Pickle Finance email list",
                            "description": "The human-readable name for the list."
                          },
                          "list_type": {
                            "type": "string",
                            "example": "Email",
                            "enum": [
                              "Email",
                              "Mobile",
                              "Postcode"
                            ],
                            "description": "The type of list this is."
                          }
                        },
                        "required": [
                          "list_id",
                          "list_name",
                          "list_type"
                        ]
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "### Overview\nReturns a list of lists.\n \nReasons to use this endpoint:\n- Retrieve your lists.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          }
        ],
        "tags": [
          "Lists"
        ]
      }
    },
    "/lists/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "example": 13
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Our unique ID for the list."
        }
      ],
      "get": {
        "summary": "Retrieve metadata for a list",
        "tags": [
          "Lists"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "null",
                      "description": ""
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "list_id": {
                          "type": "integer",
                          "example": 13,
                          "description": "Our unique ID for the list."
                        },
                        "list_name": {
                          "type": "string",
                          "example": "Pickle Finance email list",
                          "description": "The human-readable name for the list."
                        },
                        "list_type": {
                          "type": "string",
                          "example": "Email",
                          "enum": [
                            "Email",
                            "Mobile",
                            "Postcode"
                          ],
                          "description": "The type of list this is."
                        }
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-lists-id",
        "description": "### Overview\nReturns details for the specified list.\n\nReasons to use this endpoint:\n- Retrieve an individual list",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          }
        ]
      }
    },
    "/lists/{id}/records": {
      "parameters": [
        {
          "schema": {
            "type": "integer",
            "example": 13
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Our unique ID for the list."
        }
      ],
      "get": {
        "summary": "Get records in a list",
        "tags": [
          "Lists"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "description": "",
                      "type": "null"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The value added to the list.",
                            "example": "+61488853631"
                          },
                          "create_date": {
                            "type": "string",
                            "description": "The date the record was added to the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                            "example": "2020-09-02 09:57:15.5030000"
                          },
                          "expiry": {
                            "type": "string",
                            "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                            "example": "2021-09-02",
                            "format": "date"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-lists-id-records",
        "description": "### Overview\nReturns the individual items in the specified list.\n\nReasons to use this endpoint:\n- Review details for a listed applicant to confirm accuracy.\n- Review details for all listed applicants.\n- Review your list of postcodes.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          },
          {
            "schema": {
              "type": "string",
              "example": "[{\"firstName\":\"Bryan\",\"lastName\":\"Connerty\",\"dob\":\"1968-08-08\"}]"
            },
            "in": "query",
            "name": "values",
            "description": "**Emails**, **Mobiles**, **Postcodes**: comma separated values. **First name + last name + date of birth**: a JSON array of objects."
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-08-18"
            },
            "in": "query",
            "name": "created_at_min",
            "description": "The 'from' create date in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-08-30"
            },
            "in": "query",
            "name": "created_at_max",
            "description": "The 'to' create date in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
          }
        ]
      },
      "post": {
        "summary": "Add records to a list",
        "operationId": "post-lists-id-records",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "null",
                      "description": ""
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "added": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value added to the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was added to the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          },
                          "updated": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value updated in the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was updated in the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          },
                          "deleted": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value removed from the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was removed from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "### Overview\nAdds individual items to the specified list.\n\nReasons to use this endpoint:\n- Add details for a listed applicant to avoid purchasing their lead in future.\n- Add postcodes to a list to expand the address areas you'd like to buy leads in.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          }
        ],
        "tags": [
          "Lists"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "The value to add to the list (e.g. an email, a mobile, a postcode) or an object containing first name + last name + date of birth.",
                      "example": "+61488853631"
                    },
                    "expiry_date": {
                      "type": "string",
                      "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                      "example": "2021-09-02",
                      "format": "date"
                    }
                  }
                }
              },
              "examples": {
                "Emails": {
                  "value": [
                    "support@creditsense.com.au",
                    "help@creditsense.com.au",
                    "support@leadmarketonline.com"
                  ]
                },
                "Mobiles": {
                  "value": [
                    "0488853631",
                    "+61488857140",
                    {
                      "value": "+18774407696",
                      "expiry_date": "2021-09-02"
                    }
                  ]
                },
                "Postcodes": {
                  "value": [
                    4000,
                    4001,
                    4006
                  ]
                },
                "Name + DOB": {
                  "value": {
                    "value": {
                      "firstName": "Sacker",
                      "lastName": "Kate",
                      "dob": "1987-01-30"
                    },
                    "expiry_date": "2021-09-02"
                  }
                }
              }
            }
          },
          "description": "The request body should be formatted as an array of:\n- integers (e.g. a list of postcodes)\n- strings (e.g. a list of emails)\n- objects containing an expiry date and a value (e.g. postcode or email)\n- objects containing an expiry date and a value object, containing first name + last name + date of birth\n\nSee the **request samples** for formatting options."
        }
      },
      "put": {
        "summary": "Update records in a list",
        "operationId": "put-lists-id-records",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "null",
                      "description": ""
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "added": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value added to the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was added to the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          },
                          "updated": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value updated in the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was updated in the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          },
                          "deleted": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value removed from the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was removed from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          },
                          "ignored": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "string",
                                  "description": "The value unchanged in the list.",
                                  "example": "+61488853631"
                                },
                                "create_date": {
                                  "type": "string",
                                  "description": "The date the record was checked but unchanged in the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "example": "2020-09-02 09:57:15.5030000"
                                },
                                "expiry": {
                                  "type": "string",
                                  "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                                  "format": "date",
                                  "example": "2021-09-02"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "### Overview\nUpdates individual items in the specified list.\n\nReasons to use this endpoint:\n- Amend details for a listed applicant when they are incorrect.\n- Update postcodes on a list to expand the address areas you'd like to buy leads in.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          },
          {
            "schema": {
              "type": "string",
              "example": "{\"firstName\":\"Bryan\",\"lastName\":\"Connerty\",\"dob\":\"1968-08-08\"}"
            },
            "in": "query",
            "name": "values",
            "description": "**Email**, **Mobile**, **Postcode**: a sting or integer value. **First name + last name + date of birth**: a JSON object."
          }
        ],
        "tags": [
          "Lists"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "example": "+61488853631",
                    "description": "The value to update in the list (e.g. an email, a mobile, a postcode) or an object containing first name + last name + date of birth."
                  },
                  "expiry_date": {
                    "type": "string",
                    "example": "2021-09-02",
                    "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                    "format": "date"
                  }
                }
              },
              "examples": {
                "Email": {
                  "value": {
                    "value": "support@creditsense.com.au",
                    "expiry_date": "2021-09-02"
                  }
                },
                "Mobile": {
                  "value": {
                    "value": "+61488853631",
                    "expiry_date": "2021-09-02"
                  }
                },
                "Postcode": {
                  "value": {
                    "value": 4000,
                    "expiry_date": "2021-09-02"
                  }
                },
                "Name + DOB": {
                  "value": {
                    "value": {
                      "firstName": "Grigor",
                      "lastName": "Andolov",
                      "dob": "1952-06-02"
                    },
                    "expiry_date": "2021-09-02"
                  }
                }
              }
            }
          },
          "description": "The request body should be formatted as an object containing:\n- an expiry date and a value (e.g. postcode or email)\n- an expiry date and a value object, containing first name + last name + date of birth\n\nSee the **request samples** for formatting options."
        }
      },
      "delete": {
        "summary": "Remove records from a list",
        "operationId": "delete-lists-id-records",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "null",
                      "description": ""
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The value removed from the list.",
                            "example": "+61488853631"
                          },
                          "create_date": {
                            "type": "string",
                            "description": "The date the record was removed from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                            "example": "2020-09-02 09:57:15.5030000"
                          },
                          "expiry": {
                            "type": "string",
                            "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601).",
                            "example": "2021-09-02",
                            "format": "date"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "207": {
            "description": "Multi-Status (WebDAV)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "The value removed from the list."
                          },
                          "create_date": {
                            "type": "string",
                            "description": "The date the record was removed from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
                          },
                          "expiry": {
                            "type": "string",
                            "description": "The date to expire the record from the list in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "current_page": {
                      "type": "integer",
                      "example": 1,
                      "description": "The requested page of results."
                    },
                    "records_per_page": {
                      "type": "integer",
                      "description": "The limit of records per page.",
                      "example": 20
                    },
                    "total_records": {
                      "type": "integer",
                      "description": "The total number of records for the filter.",
                      "example": 100
                    },
                    "pages": {
                      "type": "string",
                      "description": "The total page count for the filter.",
                      "example": "5"
                    },
                    "errors": {
                      "type": "array",
                      "description": "Null, or a list of error objects.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "bad_request"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "400.1",
                              "400.2",
                              "400.3",
                              "400.4"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The request is missing parameters.",
                              "The request was empty.",
                              "The request has malformed data.",
                              "The request has attempted to create an already existing item."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    },
                    "data": {
                      "type": "null"
                    }
                  },
                  "required": [
                    "current_page",
                    "records_per_page",
                    "total_records",
                    "pages",
                    "errors",
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unauthorized"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "401.1",
                              "401.2",
                              "401.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Invalid API key.",
                              "Invalid API token.",
                              "Invalid API key/token."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "not_found"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "404.1",
                              "404.2",
                              "404.3"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No endpoint exists for this URL",
                              "No resource at this URL.",
                              "No resource yielded by this URL and parameters."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "unprocessable_entity"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "422.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "No applications provided."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "server_error"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "500.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "The server has encountered an error."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errors": {
                      "type": "array",
                      "description": "Details any errors encountered during the import.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "error_type": {
                            "type": "string",
                            "description": "The category of this error.",
                            "enum": [
                              "service_unavailable"
                            ]
                          },
                          "error_code": {
                            "type": "string",
                            "description": "The code for this error.",
                            "enum": [
                              "503.1"
                            ]
                          },
                          "error_message": {
                            "type": "string",
                            "description": "A human-readable message for this error",
                            "enum": [
                              "Unable to service your request at this time. Please try again later."
                            ]
                          },
                          "error_description": {
                            "type": "string",
                            "description": "The details of the error, which may include details of the entry that had the error."
                          }
                        },
                        "required": [
                          "error_type",
                          "error_code",
                          "error_message"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "### Overview\nRemoves individual items from the specified list.\n\nReasons to use this endpoint:\n- Remove details for a listed applicant when they are no longer current/accurate.\n- Remove postcodes from a list to narrow the address areas you'd like to buy leads in.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "default": "application/json"
            },
            "in": "header",
            "name": "Content-Type",
            "description": "Indicates the type of data being sent.",
            "required": true,
            "default": "application/json"
          },
          {
            "schema": {
              "type": "string",
              "example": "FC2FA9F9-57DF-4026-8F08-48845A5000F9"
            },
            "in": "header",
            "name": "apiToken",
            "required": true,
            "description": "Identifies your access to the API."
          },
          {
            "schema": {
              "type": "string",
              "example": "[{\"firstName\":\"Ira\",\"lastName\":\"Schirmer\",\"dob\":\"1973-12-27\"}]"
            },
            "in": "query",
            "name": "values",
            "description": "**Emails**, **Mobiles**, **Postcodes**: comma separated values. **First name + last name + date of birth**: a JSON array of objects."
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-08-18"
            },
            "in": "query",
            "name": "created_at_min",
            "description": "The 'from' create date in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
          },
          {
            "schema": {
              "type": "string",
              "format": "date",
              "example": "2020-08-30"
            },
            "in": "query",
            "name": "created_at_max",
            "description": "The 'to' create date in [ISO format](https://en.wikipedia.org/wiki/ISO_8601)."
          }
        ],
        "tags": [
          "Lists"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Lead-schema": {
        "title": "Lead schema",
        "type": "object",
        "description": "",
        "x-tags": [
          "SchemaDefinitions"
        ],
        "properties": {
          "Applicant": {
            "$ref": "#/components/schemas/Applicant-schema"
          },
          "Application": {
            "$ref": "#/components/schemas/Application-schema"
          },
          "Buyer_Data": {
            "$ref": "#/components/schemas/Buyer_Data-schema"
          },
          "Custom_Data": {
            "$ref": "#/components/schemas/Custom_Data-schema"
          },
          "Decision_Points": {
            "$ref": "#/components/schemas/Decision_Points-schema"
          },
          "Seller_Data": {
            "$ref": "#/components/schemas/Seller_Data-schema"
          }
        }
      },
      "Applicant-schema": {
        "title": "Applicant schema",
        "type": "object",
        "description": "Information about the applicant.",
        "properties": {
          "Applicant_Type": {
            "type": "string",
            "example": "Primary",
            "description": "The type of applicant (e.g. Primary, Guarantor, Secondary, Business, etc.)"
          },
          "References": {
            "type": "object",
            "description": "Information about the relationship between the customer and any referees.",
            "properties": {
              "Reference": {
                "type": "array",
                "description": "",
                "items": {
                  "type": "object",
                  "properties": {
                    "Relationship_Type": {
                      "type": "string",
                      "example": "Previous employer",
                      "description": "The referee's relationship to the applicant (e.g. friend, mother, employer, etc.)"
                    },
                    "Known_Applicant_Years": {
                      "type": "string",
                      "description": "The number of years the referee has known the customer.",
                      "example": "3"
                    },
                    "Person_Other": {
                      "type": "object",
                      "properties": {
                        "Title": {
                          "type": "string",
                          "description": "The person's title (e.g. Mr, Mrs, Ms, Dr, etc.)",
                          "example": "Mr"
                        },
                        "Date_Of_Birth": {
                          "type": "string",
                          "description": "The person's date of birth.",
                          "format": "date",
                          "example": "1975-07-17"
                        },
                        "Last_Name": {
                          "type": "string",
                          "description": "The person's last name.",
                          "example": "Rhoades"
                        },
                        "Middle_Names": {
                          "type": "string",
                          "description": "The person's middle name.",
                          "example": "Chuck"
                        },
                        "First_Name": {
                          "type": "string",
                          "description": "The person's first name.",
                          "example": "Charles"
                        },
                        "Gender": {
                          "type": "string",
                          "description": "The person's gender (e.g. M, F).",
                          "example": "M"
                        },
                        "Contact_Methods": {
                          "type": "object",
                          "properties": {
                            "Contact_Method": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "Contact_Other": {
                                    "type": "object",
                                    "description": "Contact details (e.g. phone numbers, email addresses etc.)",
                                    "properties": {
                                      "Contact_Type": {
                                        "type": "string",
                                        "description": "The type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                                        "example": "mobile"
                                      },
                                      "Contact_Value": {
                                        "type": "string",
                                        "description": "The contact (e.g. email address, mobile number, skype address, etc.) For phone numbers we recommend using international format (e.g. AU = +614..., CA = +1..., NZ = +642...).",
                                        "example": "+61488853631"
                                      },
                                      "V_Contact_Value": {
                                        "type": "string",
                                        "example": "+61488853631",
                                        "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) Australian and New Zealand mobile and landline numbers are validated on their syntax and length, while Canadian phone numbers are only checked to be a phone number (the distinction between a cell and a landline cannot be made by looking at a Canadian phone number alone)."
                                      },
                                      "V_Contact_Type": {
                                        "type": "string",
                                        "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                                        "enum": [
                                          "MOB",
                                          "FIXED_LINE",
                                          "PAGER",
                                          "PERSONAL_NUMBER",
                                          "PREMIUM_RATE",
                                          "SHARED_COST",
                                          "TOLL_FREE",
                                          "UAN",
                                          "UNKNOWN",
                                          "VOICEMAIL",
                                          "VOIP"
                                        ]
                                      }
                                    }
                                  },
                                  "Address": {
                                    "type": "object",
                                    "description": "Information about the person's addresses.",
                                    "properties": {
                                      "Address_Line_1": {
                                        "type": "string",
                                        "description": "Building name, suite number, etc.",
                                        "example": "Aurora Tower"
                                      },
                                      "Address_Line_2": {
                                        "type": "string",
                                        "description": "Street number, name and type.",
                                        "example": "Level 69, 420 Queen Street"
                                      },
                                      "Suburb": {
                                        "type": "string",
                                        "description": "Suburb, Town, Municipality, etc.",
                                        "example": "Brisbane"
                                      },
                                      "State": {
                                        "type": "string",
                                        "description": "AU = State or Territory, CA = Province or Territory, NZ = Town or City.",
                                        "example": "QLD"
                                      },
                                      "Postcode": {
                                        "type": "string",
                                        "description": "Postcode or Zip Code.",
                                        "example": "4000"
                                      },
                                      "Is_Current": {
                                        "type": "string",
                                        "description": "Denotes whether this is the person's current address.",
                                        "example": "true"
                                      },
                                      "Residential_Type": {
                                        "type": "string",
                                        "description": "The type of residence (e.g. house, unit, rural, acreage, etc.)",
                                        "example": "Apartment"
                                      },
                                      "Residential_Status": {
                                        "type": "string",
                                        "description": "The person's relationhsip to the address (e.g. renting, buying, boarding, etc.)",
                                        "example": "Renting"
                                      },
                                      "Time_At_Address_Months": {
                                        "type": "string",
                                        "description": "The number of months the person has lived/did live at the address.",
                                        "example": "36"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "V_Unique_Contact_Methods": {
                          "type": "object",
                          "properties": {
                            "V_Unique_Contact_Method": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "V_Unique_Contact_Other": {
                                    "type": "object",
                                    "properties": {
                                      "V_Unique_Contact_Value": {
                                        "type": "string",
                                        "example": "+61488853631",
                                        "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) as a consolidation of two or more contacts where they are identical."
                                      },
                                      "V_Unique_Contact_Type": {
                                        "type": "string",
                                        "enum": [
                                          "MOB",
                                          "FIXED_LINE",
                                          "PAGER",
                                          "PERSONAL_NUMBER",
                                          "PREMIUM_RATE",
                                          "SHARED_COST",
                                          "TOLL_FREE",
                                          "UAN",
                                          "UNKNOWN",
                                          "VOICEMAIL",
                                          "VOIP"
                                        ],
                                        "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)"
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "Financials": {
            "type": "object",
            "description": "Information about the customer's income and liabilities.",
            "properties": {
              "Financial": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Detailed_Income": {
                      "type": "object",
                      "description": "Detailed information about the customer's current or previous income.",
                      "properties": {
                        "Source": {
                          "type": "string",
                          "description": "The name of the source of the customer's income (e.g. Coles, Municipality of Manitoba, Vodafone, etc.)",
                          "example": "Axe Capital"
                        },
                        "Type": {
                          "type": "string",
                          "description": "The customer's income type (e.g. salary, benefits, rental, gift, etc.)",
                          "example": "Full-time"
                        },
                        "Frequency": {
                          "type": "string",
                          "description": "The frequency with which the customer is paid (e.g. weekly, fortnightly, monthly, etc.)",
                          "example": "weekly"
                        },
                        "Description": {
                          "type": "string",
                          "description": "Additional information about this income.",
                          "example": "This is the customer's primary income"
                        },
                        "Net_Amount": {
                          "type": "number",
                          "description": "The net amount of the customer's pay per frequency.",
                          "example": 2000
                        },
                        "Gross_Amount": {
                          "type": "number",
                          "description": "The gross amount of the customer's pay per frequency.",
                          "example": 3000
                        },
                        "Is_Current": {
                          "type": "string",
                          "description": "Denotes whether the source of income is current.",
                          "example": "false"
                        },
                        "Start_Date": {
                          "type": "string",
                          "format": "date",
                          "description": "The date this income began.",
                          "example": "2016-01-01"
                        },
                        "End_Date": {
                          "type": "string",
                          "format": "date",
                          "description": "The date this income ended.",
                          "example": "2020-08-26"
                        }
                      }
                    },
                    "Detailed_Liability": {
                      "type": "object",
                      "description": "Detailed information about the customer's current liabilities.",
                      "properties": {
                        "Type": {
                          "type": "string",
                          "description": "The type of liability (e.g. ongoing, once-off).",
                          "example": "once-off"
                        },
                        "Frequency": {
                          "type": "string",
                          "description": "The frequency with which the liability is paid (e.g. weekly, fortnightly, monthly, etc.)",
                          "example": "monthly"
                        },
                        "Frequency_Amount": {
                          "type": "number",
                          "description": "The amount paid towards the liability per frequency.",
                          "example": 100
                        },
                        "Balance": {
                          "type": "number",
                          "description": "The amount currently owing on the liability.",
                          "example": 1000
                        },
                        "Start_Date": {
                          "type": "string",
                          "format": "date",
                          "description": "The date that the customer assumed the liability."
                        },
                        "Estimated_End_Date": {
                          "type": "string",
                          "format": "date",
                          "description": "The estimated date that the customer will finalise the liability."
                        },
                        "Description": {
                          "type": "string",
                          "description": "Description of the liability (e.g. rent, loan, living expenses, education, etc.)",
                          "example": "Personal Loan"
                        }
                      }
                    },
                    "Summary_Income": {
                      "type": "object",
                      "description": "Summary information about the customer's current income.",
                      "properties": {
                        "Net_Amount": {
                          "type": "string",
                          "example": "2000",
                          "description": "The net amount of the customer's pay per frequency."
                        },
                        "Gross_Amount": {
                          "type": "string",
                          "example": "3000",
                          "description": "The gross amount of the customer's pay per frequency."
                        },
                        "Frequency": {
                          "type": "string",
                          "example": "weekly",
                          "description": "The frequency with which the customer is paid (e.g. weekly, fortnightly, monthly, etc.)"
                        }
                      }
                    },
                    "Summary_Liability": {
                      "type": "object",
                      "description": "Summary information about the customer's current liabilities.",
                      "properties": {
                        "Amount": {
                          "type": "string",
                          "example": "100",
                          "description": "The amount paid towards the liability per frequency."
                        },
                        "Frequency": {
                          "type": "string",
                          "example": "monthly",
                          "description": "The frequency with which the liability is paid (e.g. weekly, fortnightly, monthly, etc.)"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "Bank_Accounts": {
            "type": "object",
            "description": "Information about the customer's bank accounts.",
            "properties": {
              "Bank_Account": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Account_Number": {
                      "type": "string",
                      "description": "The customer's account number.",
                      "example": "17012016"
                    },
                    "Account_Name": {
                      "type": "string",
                      "description": "The customer's account name.",
                      "example": "Super Saver"
                    },
                    "Bank_Name": {
                      "type": "string",
                      "description": "The name of the customer's bank.",
                      "example": "Mason Capital Savings and Loan"
                    },
                    "Account_Type": {
                      "type": "string",
                      "description": "The type of account (e.g. savings, cheque, etc.)",
                      "example": "Savings"
                    },
                    "BSB": {
                      "type": "string",
                      "description": "The customer's BSB or routing (transit) number.",
                      "example": "440003"
                    },
                    "Balance": {
                      "type": "string",
                      "description": "The customer's current account balance.",
                      "example": "10000"
                    },
                    "Age_Of_Account": {
                      "type": "string",
                      "description": "The age of the customer's account in years.",
                      "example": "4"
                    }
                  }
                }
              }
            }
          },
          "Person_Applicant": {
            "type": "object",
            "description": "Information about the applicant.",
            "properties": {
              "Title": {
                "type": "string",
                "example": "Ms",
                "description": "The customer's title (e.g. Mr, Mrs, Ms, Dr, etc.)"
              },
              "Date_Of_Birth": {
                "type": "string",
                "example": "1978-02-11"
              },
              "Last_Name": {
                "type": "string",
                "example": "Rhoades",
                "minLength": 1
              },
              "Middle_Names": {
                "type": "string",
                "description": "The person's middle name.",
                "example": "Chuck"
              },
              "First_Name": {
                "type": "string",
                "example": "Wendy",
                "description": "The customer's first name.",
                "minLength": 1
              },
              "Gender": {
                "type": "string",
                "example": "F"
              },
              "Dependents": {
                "type": "string",
                "example": "2"
              },
              "Marital_Status": {
                "type": "string",
                "example": "Separated"
              },
              "Can_Provide_Guarantor": {
                "type": "string",
                "example": "true"
              },
              "Contact_Methods": {
                "type": "object",
                "properties": {
                  "Contact_Method": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "Contact_Other": {
                          "type": "object",
                          "description": "Contact details (e.g. phone numbers, email addresses etc.)",
                          "properties": {
                            "Contact_Type": {
                              "type": "string",
                              "description": "The type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                              "example": "mobile"
                            },
                            "Contact_Value": {
                              "type": "string",
                              "description": "The contact (e.g. email address, mobile number, skype address, etc.) For phone numbers we recommend using international format (e.g. AU = +614..., CA = +1..., NZ = +642...).",
                              "example": "+61488853631"
                            },
                            "V_Contact_Value": {
                              "type": "string",
                              "example": "+61488853631",
                              "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) Australian and New Zealand mobile and landline numbers are validated on their syntax and length, while Canadian phone numbers are only checked to be a phone number (the distinction between a cell and a landline cannot be made by looking at a Canadian phone number alone)."
                            },
                            "V_Contact_Type": {
                              "type": "string",
                              "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                              "enum": [
                                "MOB",
                                "FIXED_LINE",
                                "PAGER",
                                "PERSONAL_NUMBER",
                                "PREMIUM_RATE",
                                "SHARED_COST",
                                "TOLL_FREE",
                                "UAN",
                                "UNKNOWN",
                                "VOICEMAIL",
                                "VOIP"
                              ]
                            }
                          }
                        },
                        "Address": {
                          "type": "object",
                          "description": "Information about the person's addresses.",
                          "properties": {
                            "Address_Line_1": {
                              "type": "string",
                              "description": "Building name, suite number, etc.",
                              "example": "Aurora Tower"
                            },
                            "Address_Line_2": {
                              "type": "string",
                              "description": "Street number, name and type.",
                              "example": "Level 69, 420 Queen Street"
                            },
                            "Suburb": {
                              "type": "string",
                              "description": "Suburb, Town, Municipality, etc.",
                              "example": "Brisbane"
                            },
                            "State": {
                              "type": "string",
                              "description": "AU = State or Territory, CA = Province or Territory, NZ = Town or City.",
                              "example": "QLD"
                            },
                            "Postcode": {
                              "type": "string",
                              "description": "Postcode or Zip Code.",
                              "example": "4000"
                            },
                            "Is_Current": {
                              "type": "string",
                              "description": "Denotes whether this is the person's current address.",
                              "example": "false"
                            },
                            "Residential_Type": {
                              "type": "string",
                              "description": "The type of residence (e.g. house, unit, rural, acreage, etc.)",
                              "example": "Apartment"
                            },
                            "Residential_Status": {
                              "type": "string",
                              "description": "The person's relationhsip to the address (e.g. renting, buying, boarding, etc.)",
                              "example": "Renting"
                            },
                            "Time_At_Address_Months": {
                              "type": "string",
                              "description": "The number of months the person has lived/did live at the address.",
                              "example": "36"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "V_Unique_Contact_Methods": {
                "type": "object",
                "properties": {
                  "V_Unique_Contact_Method": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "V_Unique_Contact_Other": {
                          "type": "object",
                          "properties": {
                            "V_Unique_Contact_Value": {
                              "type": "string",
                              "example": "+61488853631",
                              "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) as a consolidation of two or more contacts where they are identical."
                            },
                            "V_Unique_Contact_Type": {
                              "type": "string",
                              "enum": [
                                "MOB",
                                "FIXED_LINE",
                                "PAGER",
                                "PERSONAL_NUMBER",
                                "PREMIUM_RATE",
                                "SHARED_COST",
                                "TOLL_FREE",
                                "UAN",
                                "UNKNOWN",
                                "VOICEMAIL",
                                "VOIP"
                              ],
                              "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "required": [
              "Last_Name",
              "First_Name"
            ]
          },
          "Employment_History": {
            "type": "object",
            "description": "Information about the customer's current and past employment.",
            "properties": {
              "Employment": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Is_Current": {
                      "type": "string",
                      "example": "true",
                      "description": "Denotes whether this is the customer's current employer."
                    },
                    "Employment_Type": {
                      "type": "string",
                      "example": "Contract",
                      "description": "The customer's type of employment (e.g. full-time, part-time, casual, etc.)"
                    },
                    "Occupation": {
                      "type": "string",
                      "example": "Performance Coach",
                      "description": "The customer's occupation (e.g. plumber, admin assistant, engineer, etc.)"
                    },
                    "Working_Hours_Weekly": {
                      "type": "string",
                      "example": "40",
                      "description": "The average number of hours the customer works per week."
                    },
                    "Organisation_Name": {
                      "type": "string",
                      "example": "Axe Captial",
                      "description": "The name of the customer's employer."
                    },
                    "Start_Date": {
                      "type": "string",
                      "example": "2015-02-14",
                      "format": "date",
                      "description": "The date the customer started this employment."
                    },
                    "End_Date": {
                      "type": "string",
                      "example": "2020-08-28",
                      "format": "date",
                      "description": "The date the customer started this employment."
                    },
                    "Employment_Contacts": {
                      "type": "object",
                      "properties": {
                        "Person_Other": {
                          "type": "object",
                          "properties": {
                            "Title": {
                              "type": "string",
                              "description": "The person's title (e.g. Mr, Mrs, Ms, Dr, etc.)",
                              "example": "Mr"
                            },
                            "Date_Of_Birth": {
                              "type": "string",
                              "description": "The person's date of birth.",
                              "format": "date",
                              "example": "1977-04-12"
                            },
                            "Last_Name": {
                              "type": "string",
                              "description": "The person's last name.",
                              "example": "Axelrod"
                            },
                            "First_Name": {
                              "type": "string",
                              "description": "The person's first name.",
                              "example": "Bobby"
                            },
                            "Gender": {
                              "type": "string",
                              "description": "The person's gender (e.g. M, F).",
                              "example": "M"
                            },
                            "Contact_Methods": {
                              "type": "object",
                              "properties": {
                                "Contact_Method": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "Contact_Other": {
                                        "type": "object",
                                        "description": "Contact details (e.g. phone numbers, email addresses etc.)",
                                        "properties": {
                                          "Contact_Type": {
                                            "type": "string",
                                            "description": "The type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                                            "example": "mobile"
                                          },
                                          "Contact_Value": {
                                            "type": "string",
                                            "description": "The contact (e.g. email address, mobile number, skype address, etc.) For phone numbers we recommend using international format (e.g. AU = +614..., CA = +1..., NZ = +642...).",
                                            "example": "+61488853631"
                                          },
                                          "V_Contact_Value": {
                                            "type": "string",
                                            "example": "+61488853631",
                                            "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) Australian and New Zealand mobile and landline numbers are validated on their syntax and length, while Canadian phone numbers are only checked to be a phone number (the distinction between a cell and a landline cannot be made by looking at a Canadian phone number alone)."
                                          },
                                          "V_Contact_Type": {
                                            "type": "string",
                                            "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                                            "enum": [
                                              "MOB",
                                              "FIXED_LINE",
                                              "PAGER",
                                              "PERSONAL_NUMBER",
                                              "PREMIUM_RATE",
                                              "SHARED_COST",
                                              "TOLL_FREE",
                                              "UAN",
                                              "UNKNOWN",
                                              "VOICEMAIL",
                                              "VOIP"
                                            ]
                                          }
                                        }
                                      },
                                      "Address": {
                                        "type": "object",
                                        "description": "Information about the person's addresses.",
                                        "properties": {
                                          "Address_Line_1": {
                                            "type": "string",
                                            "description": "Building name, suite number, etc.",
                                            "example": "Casino Towers"
                                          },
                                          "Address_Line_2": {
                                            "type": "string",
                                            "description": "Street number, name and type.",
                                            "example": "Level 33, 151 George Street"
                                          },
                                          "Suburb": {
                                            "type": "string",
                                            "description": "Suburb, Town, Municipality, etc.",
                                            "example": "Brisbane"
                                          },
                                          "State": {
                                            "type": "string",
                                            "description": "AU = State or Territory, CA = Province or Territory, NZ = Town or City.",
                                            "example": "QLD"
                                          },
                                          "Postcode": {
                                            "type": "string",
                                            "description": "Postcode or Zip Code.",
                                            "example": "4000"
                                          },
                                          "Is_Current": {
                                            "type": "string",
                                            "description": "Denotes whether this is the person's current address.",
                                            "example": "true"
                                          },
                                          "Residential_Type": {
                                            "type": "string",
                                            "description": "The type of residence (e.g. house, unit, rural, acreage, etc.)",
                                            "example": "Apartment"
                                          },
                                          "Residential_Status": {
                                            "type": "string",
                                            "description": "The person's relationhsip to the address (e.g. renting, buying, boarding, etc.)",
                                            "example": "Owned"
                                          },
                                          "Time_At_Address_Months": {
                                            "type": "string",
                                            "description": "The number of months the person has lived/did live at the address.",
                                            "example": "19"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "V_Unique_Contact_Methods": {
                              "type": "object",
                              "properties": {
                                "V_Unique_Contact_Method": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "V_Unique_Contact_Other": {
                                        "type": "object",
                                        "properties": {
                                          "V_Unique_Contact_Value": {
                                            "type": "string",
                                            "example": "+61488853631",
                                            "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) as a consolidation of two or more contacts where they are identical."
                                          },
                                          "V_Unique_Contact_Type": {
                                            "type": "string",
                                            "enum": [
                                              "MOB",
                                              "FIXED_LINE",
                                              "PAGER",
                                              "PERSONAL_NUMBER",
                                              "PREMIUM_RATE",
                                              "SHARED_COST",
                                              "TOLL_FREE",
                                              "UAN",
                                              "UNKNOWN",
                                              "VOICEMAIL",
                                              "VOIP"
                                            ],
                                            "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)"
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "Contact_Methods": {
                      "type": "object",
                      "properties": {
                        "Contact_Method": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "Contact_Other": {
                                "type": "object",
                                "description": "Contact details (e.g. phone numbers, email addresses etc.)",
                                "properties": {
                                  "Contact_Type": {
                                    "type": "string",
                                    "description": "The type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                                    "example": "mobile"
                                  },
                                  "Contact_Value": {
                                    "type": "string",
                                    "description": "The contact (e.g. email address, mobile number, skype address, etc.) For phone numbers we recommend using international format (e.g. AU = +614..., CA = +1..., NZ = +642...).",
                                    "example": "+61488853631"
                                  },
                                  "V_Contact_Value": {
                                    "type": "string",
                                    "example": "+61488853631",
                                    "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) Australian and New Zealand mobile and landline numbers are validated on their syntax and length, while Canadian phone numbers are only checked to be a phone number (the distinction between a cell and a landline cannot be made by looking at a Canadian phone number alone)."
                                  },
                                  "V_Contact_Type": {
                                    "type": "string",
                                    "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)",
                                    "enum": [
                                      "MOB",
                                      "FIXED_LINE",
                                      "PAGER",
                                      "PERSONAL_NUMBER",
                                      "PREMIUM_RATE",
                                      "SHARED_COST",
                                      "TOLL_FREE",
                                      "UAN",
                                      "UNKNOWN",
                                      "VOICEMAIL",
                                      "VOIP"
                                    ]
                                  }
                                }
                              },
                              "Address": {
                                "type": "object",
                                "description": "Information about the person's addresses.",
                                "properties": {
                                  "Address_Line_1": {
                                    "type": "string",
                                    "description": "Building name, suite number, etc.",
                                    "example": "Aurora Tower"
                                  },
                                  "Address_Line_2": {
                                    "type": "string",
                                    "description": "Street number, name and type.",
                                    "example": "Level 69, 420 Queen Street"
                                  },
                                  "Suburb": {
                                    "type": "string",
                                    "description": "Suburb, Town, Municipality, etc.",
                                    "example": "Brisbane"
                                  },
                                  "State": {
                                    "type": "string",
                                    "description": "AU = State or Territory, CA = Province or Territory, NZ = Town or City.",
                                    "example": "QLD"
                                  },
                                  "Postcode": {
                                    "type": "string",
                                    "description": "Postcode or Zip Code.",
                                    "example": "4000"
                                  },
                                  "Is_Current": {
                                    "type": "string",
                                    "description": "Denotes whether this is the person's current address.",
                                    "example": "false"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "V_Unique_Contact_Methods": {
                      "type": "object",
                      "properties": {
                        "V_Unique_Contact_Method": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "V_Unique_Contact_Other": {
                                "type": "object",
                                "properties": {
                                  "V_Unique_Contact_Value": {
                                    "type": "string",
                                    "example": "+61488853631",
                                    "description": "The validated contact (e.g. email address, mobile number, skype address, etc.) as a consolidation of two or more contacts where they are identical."
                                  },
                                  "V_Unique_Contact_Type": {
                                    "type": "string",
                                    "enum": [
                                      "MOB",
                                      "FIXED_LINE",
                                      "PAGER",
                                      "PERSONAL_NUMBER",
                                      "PREMIUM_RATE",
                                      "SHARED_COST",
                                      "TOLL_FREE",
                                      "UAN",
                                      "UNKNOWN",
                                      "VOICEMAIL",
                                      "VOIP"
                                    ],
                                    "description": "The validated type of contact method (e.g. mobile, email, skype, work, home, fax, etc.)"
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "Proof_Of_Identity": {
            "type": "object",
            "description": "The customer's identification information.",
            "properties": {
              "Identification": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "Type": {
                      "type": "string",
                      "description": "The type of identity document (e.g. driver licence, Medicare card, etc.)",
                      "example": "driver licence"
                    },
                    "Document_ID": {
                      "type": "string",
                      "description": "The identifier on the document (e.g. driver licence number, Medicare card number, etc.)",
                      "example": "084859805"
                    },
                    "Issuer": {
                      "type": "string",
                      "description": "The entity that issued identity document (e.g. Transport & Main Roads QLD, Medicare, etc.)",
                      "example": "Queensland Government"
                    },
                    "Date_Expiry": {
                      "type": "string",
                      "description": "The date the identity document expires.",
                      "format": "date",
                      "example": "2029-01-06"
                    },
                    "Date_Issue": {
                      "type": "string",
                      "description": "The date the identity document was issued.",
                      "format": "date",
                      "example": "2019-01-06"
                    },
                    "File_Name": {
                      "type": "string",
                      "description": "The name of the file that contains the identity document.",
                      "example": "rhoades-driver-licence.pdf"
                    },
                    "Is_Current": {
                      "type": "string",
                      "description": "Denotes whether the identity document is current.",
                      "example": "true"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Application-schema": {
        "title": "Application schema",
        "type": "object",
        "description": "Information about the product or facility that the customer was applying for.",
        "properties": {
          "Application_Date": {
            "type": "string",
            "format": "date",
            "description": "The date the customer completed the Seller's application form.",
            "example": "2016-08-10"
          },
          "Interest_Rate": {
            "type": "number",
            "description": "The annual interest rate of the product or facility the customer applied for.",
            "example": 20
          },
          "Repayment_Amount": {
            "type": "number",
            "description": "The amount of each repayment due under the product or facility the customer applied for.",
            "example": 200
          },
          "Fees": {
            "type": "number",
            "description": "The total application fees associated with the product or facility the customer applied for.",
            "example": 100
          },
          "Type": {
            "type": "string",
            "description": "The type of product or facility the customer applied for (e.g. Personal Loan, Credit Card, SACC, etc.)",
            "example": "Personal Loan"
          },
          "Amount": {
            "type": "number",
            "description": "The amount of credit requested by the customer.",
            "example": 1000
          },
          "Reason": {
            "type": "string",
            "description": "The reason the customer requires the loan.",
            "example": "Book purchase"
          },
          "Repayment_Cycle": {
            "type": "string",
            "description": "The regularity of repayments due under the product or facility the customer applied for (e.g. weekly, fortnightly, monthly).",
            "example": "weekly"
          },
          "Repayment_Count": {
            "type": "string",
            "description": "The number of repayments due under the producat or facility the customer applied for.",
            "example": "7"
          },
          "Description": {
            "type": "string",
            "description": "Any additional notes relating to the application.",
            "example": "Purchase of first-edition 'The Second World War' six-volume series by Winston Churchill"
          }
        }
      },
      "Buyer_Data-schema": {
        "title": "Buyer Data schema",
        "type": "object",
        "description": "Information about the lead, specific to the Buyer.",
        "properties": {
          "LM_SaleDT": {
            "type": "string",
            "example": "2017-01-06 17:22:48.4700000",
            "description": "The date-time of the sale."
          },
          "Lead_Price": {
            "type": "number",
            "example": 50,
            "description": "The base sale amount for the lead. This is a duplicate of `$.Buyer_Data.Sale_Base_Amount` provided for backwards compatibility."
          },
          "CS_AppCompleted_DT": {
            "type": "string",
            "example": "2017-01-06 17:21:54.2600000",
            "description": "The date and time when the Credit Sense report was completed."
          },
          "Lead_ID": {
            "type": "integer",
            "example": 5824,
            "description": "Uniquely identifies the lead across Lead Market."
          },
          "CS_App_ID": {
            "type": "integer",
            "example": 1577797,
            "description": "Our unique identifier for the Credit Sense application."
          },
          "Winning_Bid_ID": {
            "type": "integer",
            "example": 312,
            "description": "The ID of the Bid that won the lead."
          },
          "Sale_Base_Amount": {
            "type": "number",
            "example": 50,
            "description": "The base sale amount for the lead."
          },
          "Sale_Base_Amount_Tax": {
            "type": "number",
            "example": 5,
            "description": "The tax amount for the base sale amount of the lead. This will be `0` if no tax is due for the sale."
          },
          "Sale_Trade_Comm_Amount": {
            "type": "number",
            "example": 7.5,
            "description": "The trade commission amount for the lead."
          },
          "Sale_Trade_Comm_Amount_Tax": {
            "type": "number",
            "example": 0.75,
            "description": "The tax amount for the trade comission on the lead. This will be `0` if no tax is due for the sale."
          },
          "Sale_Net_Amount": {
            "type": "number",
            "example": 63.25,
            "description": "**Sellers**: The base sale amount less the trade comission. **Buyers**: The base sale amount plus the trade comission. All amounts are tax-inclusive."
          },
          "Sale_Currency": {
            "type": "string",
            "description": "Denotes the [currency](https://www.iban.com/currency-codes) that lead sale amounts are expressed in.",
            "enum": [
              "AUD",
              "CAD",
              "GBP",
              "NZD"
            ]
          },
          "Buyer_Token": {
            "type": "string",
            "description": "A string that uniquely identifies this Lead for the Buyer. This token can be used as an alternative to `Lead_ID` in the `/application/detail` API call.\nThis field will not appear until some time after the Lead is purchased, so it will not be available on the `buyerNotifyWithData` URI notification.",
            "example": "pC81HjJmiTKJ3stwVu7a"
          }
        }
      },
      "Custom_Data-schema": {
        "title": "Custom Data schema",
        "type": "object",
        "description": "Additional information (not catered for by our schema) gathered from an engaged lead by use of the Lead Market dynamic form.",
        "properties": {
          "Your_Question_Here": {
            "type": "string",
            "example": "An example answer",
            "description": "Custom formatted data as configured on your Lead Market environment. [Contact us](mailto:support@creditsense.com.au) for more information."
          }
        }
      },
      "Decision_Points-schema": {
        "title": "Decision Points schema",
        "type": "object",
        "description": "Information about the decision points/bid criteria related to the purchase of the lead, specific to the Buyer.",
        "properties": {
          "Decision_Point": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ID": {
                  "type": "integer",
                  "description": "Uniquely identifies the decision point/bid criteria.",
                  "example": 101
                },
                "Name": {
                  "type": "string",
                  "description": "A description for the decision point/bid criteria.",
                  "example": "customerAge"
                },
                "Score_DT": {
                  "type": "string",
                  "description": "The calculated result for this decision point as a date-time. This will only be present in the absence of `$.Decision_Points.Decision_Point.Score`.",
                  "example": "1980-01-01 00:00:00.0000000"
                },
                "Score": {
                  "type": "number",
                  "description": "The calculated result for this decision point. This will only be present in the absence of `$.Decision_Points.Decision_Point.Score_DT`.",
                  "example": 50
                }
              }
            }
          }
        }
      },
      "Seller_Data-schema": {
        "title": "Seller Data schema",
        "type": "object",
        "description": "Information about the lead, specific to the Seller.",
        "properties": {
          "Client_Authority": {
            "type": "boolean",
            "example": true,
            "description": "The Seller's authority to sell the lead."
          },
          "Customer_Authority": {
            "type": "boolean",
            "example": true,
            "description": "The Seller's confirmation that they have obtained the customer's authority to trade their information on Lead Market."
          },
          "Customer_Authority_Type": {
            "type": "string",
            "enum": [
              "Implicit",
              "Explicit"
            ],
            "description": "**Implicit** - The customer has implicitly provided authority in the form of agreement to T&C's. **Explicit** - The customer has explicitly provided authority in the form of an opt-in."
          },
          "CS_App_ID": {
            "type": "integer",
            "description": "The App ID of the Credit Sense report completed by the customer.",
            "example": 18200557
          },
          "Use_MLM_Flow": {
            "type": "boolean",
            "example": true,
            "description": "Denotes whether the customer will be engaged when the lead is pushed to Lead Market."
          },
          "Lead_ID": {
            "type": "integer",
            "example": 5824,
            "description": "Uniquely identifies the lead across Lead Market."
          },
          "Lead_Token": {
            "type": "string",
            "description": "A string that uniquely identifies this Lead for the Seller.",
            "example": "F16WeC"
          },
          "Lead_Reference": {
            "type": "string",
            "example": "NYCAG2018",
            "description": "Your unique reference for the lead."
          },
          "Credit_Authority_Enquiry_Number": {
            "type": "integer",
            "description": "If your Lead Market environment is configured to sell leads with credit scores, this field allows you to pass in a previously generated credit report enquiry number.",
            "example": 7671338561
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Help docs",
    "url": "https://docs.creditsense.com.au"
  },
  "tags": [
    {
      "name": "Leads",
      "description": "Create and update leads, and retrieve the status or details of a lead."
    },
    {
      "name": "Seller",
      "description": "Add leads to be pushed to market and receive notifications with their sale outcomes."
    },
    {
      "name": "Buyer",
      "description": "Receive notifications when you buy leads, update the reference for a lead's Credit Sense application, and provide progress updates and outcomes for purchased leads."
    },
    {
      "name": "Lists",
      "description": "Create and manage lists of locations and lead attributes."
    },
    {
      "name": "SchemaDefinitions",
      "x-displayName": "Schemas",
      "description": "## Lead schema\n### Overview\nThe structure of lead details for Sellers and Buyers. \n\nShared objects between Sellers and Buyers:\n- `$.Lead.Applicant`\n- `$.Lead.Application`\n\nSeller-only object:\n- `$.Lead.Seller_Data`\n\nBuyer-only objects:\n- `$.Lead.Buyer_Data`\n- `$.Lead.Custom_Data`\n- `$.Lead.Decision_Points`\n\n### Seller data validation\nWe take what may be thought of as a _laissez faire_ approach to validation on lead data passed in by Sellers. This is not done to intentionally make Buyer integrations difficult. Rather, when a Seller is passing in details via the API it’s generally due to the lead not being engaged at the time. The stance we take on this is _it’s better to have some data that **may** be invalid, than no data_. A good example is when a lead provides a valid mobile number, but they enter it in the email address field of a Seller’s website. If the Seller's form doesn't validate the data and passes it through to Lead Market, we'll accept it. We’ll provide the raw values to the Buyer, and we’ll also provided validated contact details in the `$..V_Contact_Type` and `$..V_Contact_Value` fields. We've found this approach provides the best outcome and richer lead data sets for Buyers.\n\n<SchemaDefinition schemaRef=\"#/components/schemas/Lead-schema\" />"
    }
  ]
}